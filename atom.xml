<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Karol Galanciak - Ruby on Rails and Ember.js consultant]]></title>
  <link href="https://karolgalanciak.com/atom.xml" rel="self"/>
  <link href="https://karolgalanciak.com/"/>
  <updated>2018-08-19T20:55:17+02:00</updated>
  <id>https://karolgalanciak.com/</id>
  <author>
    <name><![CDATA[Karol Galanciak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Indexes on Rails: How to make the most of your Postgres database]]></title>
    <link href="https://karolgalanciak.com/blog/2018/08/19/indexes-on-rails-how-to-make-the-most-of-your-postgres-database/"/>
    <updated>2018-08-19T20:00:00+02:00</updated>
    <id>https://karolgalanciak.com/blog/2018/08/19/indexes-on-rails-how-to-make-the-most-of-your-postgres-database</id>
    <content type="html"><![CDATA[<p>Optimizing <strong>database queries</strong> is arguably one of the fastest ways to improve the <strong>performance</strong> of the Rails applications. There are multiple ways how you can approach it, depending on the kind of a problem. <strong>N+1 queries</strong> seem to be a pretty common issue, which is, fortunately, <strong>easy to address</strong>. However, sometimes you have some relatively <strong>simple-looking queries</strong> that seem to take way longer than they should be, indicating that they might require some optimization. The best way to improve such queries is adding a <strong>proper index</strong>.</p>

<p>But what does &ldquo;proper index&rdquo; mean? How to figure out what kind of index is exactly needed for a given query? Here are some essential facts and tips that should cover a majority of the queries you may encounter and make your database no longer a bottleneck.</p>

<!--more-->


<h2>Why index at all?</h2>

<p>Simple &ndash; to have faster queries. But why are indexes faster? The alternative to index is a sequential scanning of the entire table. That might not sound like a bad idea, but imagine you are performing a search over a huge table. What would be the fastest way to retrieve all records you are looking for &ndash; by scanning the entire table, or maybe having a way to store a subset of the records, based on some specific criteria, and then retrieve them from that place? Obviously, it&rsquo;s the second option. And that&rsquo;s roughly how indexes work.</p>

<p>As trivial as it sounds, there is a valuable lesson to learn from it: to achieve a good performance, the index must be selective enough. And the more specific you will be about those criteria, the better.</p>

<h2>Index Types</h2>

<p>Although Postgres by defaults creates <code>B-Tree</code> index when using <code>CREATE INDEX</code> command, there are a couple of more indexes that will be certainly useful in many use cases. Let&rsquo;s check them all out:</p>

<h3>B-Tree Index</h3>

<p><code>B-Tree</code> is a self-balancing tree data structure which keeps data ordered and easy to search. This index is appropriate for equality and range queries (using operators like <code>&gt;=</code>,  <code>&lt;</code> etc.) and will work great with text, timestamp and number fields.</p>

<p>B-Tree indexes are a reasonable default for most of the queries, but not for all of them. The limitation comes from the underlying structure. Discussing the details of the B-Tree data structure itself is beyond the scope of this article; nevertheless, it&rsquo;s worth keeping in mind that it&rsquo;s a similar data structure to a binary search tree, which has meaningful consequences on what can be indexed with it and how. We will get back to a couple of examples later.</p>

<h3>Hash Index</h3>

<p>Before Postgres 10, the usage of hash indexes was discouraged since they used to be not WAL-logged. Fortunately, it&rsquo;s changed in Postgres 10, and we can use them safely without worrying about rebuilding the index if something goes wrong with our database that would cause a crash. The use cases where hash indexes are useful are very limited, as they work only for equality, but they are a bit more efficient for this kind of queries comparing to b-tree indexes. If you store tokens for example and perform lookups by the token value, hash indexes would be a good way to optimize such queries.</p>

<h3>BRIN Index (Block Range Index)</h3>

<p>BRIN indexes were introduced in Postgres 9.5 which make them a pretty new addition. They tend to work very well for the large sets of ordered data, e.g., statistical data collected with timestamps which are later filtered by the time range. They will perform better than b-tree indexes in such case, although the difference won&rsquo;t be drastic. However, the different of the size of the index will be huge &ndash; BRIN index can be smaller by literally few orders of magnitude comparing to b-tree index.</p>

<h3>GIN Index (Generalized Inverted Index)</h3>

<p>GIN Indexes are the perfect choice for &ldquo;composite values&rdquo; where you perform a query which looks for an element within such &ldquo;composite&rdquo;. That is the index you will most likely want to use for <code>jsonb</code>, <code>array</code> or <code>hstore</code> data structures. They are also an excellent choice for full-text search.</p>

<h3>GiST Index (Generalized Inverted Seach Tree Index)</h3>

<p>GiST Indexes will be a good choice when the records overlap values under the same column. They are commonly used for geometry types and full-text search as well. The difference between GIN and GiST Index when it comes to full-text search is that GiST Index will be less taxing on writes comparing to GIN (as it is faster to build). But since it&rsquo;s a lossy index, there might be some extra overhead involved for reads, which makes GIN index a better choice when you mostly care about reads optimization.</p>

<h2>Optimizing Queries</h2>

<p>Here are some tips that should help you with the majority of the queries:</p>

<h3>Start with EXPLAIN</h3>

<p>With enough experience and knowledge of your app, you will develop an intuition about indexes and where they might be useful, long before having performance problems with queries. Until that happens, it&rsquo;s essential to understand how Postgres is going to execute these queries. The best tool for that purpose is using <code>EXPLAIN</code> command, which will show the execution plan generated by the query planner. <code>ActiveRecord</code> provides a convenient method &ndash; <code>explain</code> &ndash; that you can use on collections to get the query plan:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; Order.where(customer_id: 1).explain
</span><span class='line'>  Order Load (13.8ms)  SELECT "orders".* FROM "orders" WHERE "orders"."customer_id" = $1  [["customer_id", 1]]
</span><span class='line'>=&gt; EXPLAIN for: SELECT "orders".* FROM "orders" WHERE "orders"."customer_id" = $1 [["customer_id", 1]]
</span><span class='line'>                                           QUERY PLAN
</span><span class='line'>-------------------------------------------------------------------------------------------------
</span><span class='line'> Index Scan using index_orders_on_customer_id on orders  (cost=0.15..19.62 rows=50 width=1417)
</span><span class='line'>   Index Cond: (customer_id = 1)
</span><span class='line'>(2 rows)</span></code></pre></td></tr></table></div></figure>


<h3>How to tell a good query plan from a bad one?</h3>

<p>This is not that simple as it sounds, as the sequential scan can be sometimes more efficient than using an index, especially if not kept in memory, but stored entirely on disk, and even worse, an HDD one. Usually, a preferable query plan is the one that looks simpler and utilizes the least possible number of indexes, which means that it&rsquo;s better to use one index instead of two of them, like in the following example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; Product.where(warehouse_id: 1).where(category_id: 1).explain
</span><span class='line'>  Product Load (0.5ms)  SELECT "products".* FROM "products" WHERE "products"."warehouse_id" = $1 AND "products"."category_id" = $2  [["warehouse_id", 1], ["category_id", 1]]
</span><span class='line'>=&gt; EXPLAIN for: SELECT "products".* FROM "products" WHERE "products"."warehouse_id" = $1 AND "products"."category_id" = $2 [["warehouse_id", 1], ["category_id", 1]]
</span><span class='line'>                                                       QUERY PLAN
</span><span class='line'>------------------------------------------------------------------------------------------------------------------------
</span><span class='line'> Bitmap Heap Scan on products  (cost=9.08..13.10 rows=1 width=1417)
</span><span class='line'>   Recheck Cond: ((warehouse_id = 1) AND (category_id = 1))
</span><span class='line'>   -&gt;  BitmapAnd  (cost=9.08..9.08 rows=1 width=0)
</span><span class='line'>         -&gt;  Bitmap Index Scan on index_products_on_warehouse_id_and_name_and_something_else  (cost=0.00..4.31 rows=5 width=0)
</span><span class='line'>               Index Cond: (warehouse_id = 1)
</span><span class='line'>         -&gt;  Bitmap Index Scan on index_products_on_category_id  (cost=0.00..4.52 rows=50 width=0)
</span><span class='line'>               Index Cond: (category_id = 1)
</span><span class='line'>(7 rows)</span></code></pre></td></tr></table></div></figure>


<p>It doesn&rsquo;t necessarily mean that this query plan is a bad one &ndash; it could be totally the case that such query is fast enough. However, if read speed is more important for us than the index size and extra overhead on writes which will make them slower, the best way to deal with such query would be adding a compound index on both <code>warehouse_id</code> and <code>category_id</code>.</p>

<p>One statement that is especially worth keeping an eye on (besides <code>Seq Scan</code> which stands for a sequential scan) is <code>Filter</code> statement which indicates that the records required extra filtering and the index was not enough. Here is one example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> Index Scan using index_products_on_category_id on products
</span><span class='line'>   Index Cond: (category = 1)
</span><span class='line'>   Filter: (created_at = '2018-08-11'::date)</span></code></pre></td></tr></table></div></figure>


<p>Ideally, <code>created_at</code> part would appear in <code>Index Cond</code> and be fully covered by the index. Usually, adding a compound index on multiple columns solves the issue which in this example would mean having an index on both <code>category_id</code> and <code>created_at</code>, not only on <code>category_id</code>.</p>

<h3>Sequence of the columns in B-Tree index does matter</h3>

<p>The sequence of the columns in a multi-column index is critical. Imagine that you created a following index: <code>create_index :tag_items, [:taggable_type, :taggable_id]</code> and want to perform a couple of queries. For sure this index is going to be efficient for searching by both <code>taggable_type</code> and <code>taggable_id</code>. It will also work great for search by <code>taggable_type</code>. It won&rsquo;t, however, be efficient when performing a search just by <code>taggable_id</code>. The reason why it is like that is quite simple though &ndash; try to imagine how the data would be stored in a hypothetical B-Tree. First, the nodes will be organized based on the leftmost column and then, by another one. Traversing such tree when you do a search based on <code>taggable_type</code> or both <code>taggable_type</code> and <code>taggable_id</code> will be simple. However, you can&rsquo;t do the same with just <code>taggable_id</code>. Postgres might use this index anyway as it might turn out to be still more efficient than a sequential scan, but this is going to be suboptimal. If it happens that you need to perform queries by <code>taggable_id</code> only, it would be a good idea to add a separate index on that field.</p>

<h3>Unique Indexes</h3>

<p>The biggest need behind unique indexes is ensuring data integrity (since most uniqueness validations, including ActiveRecord one, don&rsquo;t enforce anything and are more useful for having a nice error message and not raising an exception than for data integrity). However, a nice side effect of a unique index is also a better performance comparing to a non-unique one.</p>

<h3>Partial Indexes</h3>

<p>Imagine that you have some Articles in your application and you want to add <code>published_at</code> datetime field indicating whether and when the article was published, and then, filter published articles by a given author. We can most likely expect a need for an index on <code>author_id</code> column in such case. What about our second condition? We could for sure add a compound index on both <code>author_id</code> and <code>published_at</code>. However, there is a better choice. We could add a partial index for <code>author_id</code> which covers only published articles, i.e., covers <code>WHERE published_at IS NOT NULL</code>!</p>

<p>Fortunately, this is supported by Rails (although writing a SQL command wouldn&rsquo;t be that difficult), we just need to use <code>where</code> option for that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">add_column</span> <span class="ss">:articles</span><span class="p">,</span> <span class="ss">:author_id</span><span class="p">,</span> <span class="ss">where</span><span class="p">:</span> <span class="s2">&quot;published_at IS NOT NULL&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Expression Indexes</h3>

<p>Imagine that you need to search users by their first name which comes from some input provided by a user. However, to avoid issues with figuring out whether the name provided by a user starts with a capital letter or not or how the names were stored in the database in the first place, you perform a query like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;lower(first_name) = ?&quot;</span><span class="p">,</span> <span class="nb">name</span><span class="o">.</span><span class="n">downcase</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This query will obviously work, however, if you have a lot of users, a query plan will indicate that it is suboptimal and instead of seeing something like <code>Index Scan using index_users_on_first_name on users</code>, you will see <code>Seq Scan on users</code>.</p>

<p>There is no need to worry though. Postgres allows creating expression indexes where you can apply some functions, which in our case is <code>lower</code>. A proper index for this scenario would need to be created that way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">add_index</span> <span class="ss">:users</span><span class="p">,</span> <span class="s2">&quot;lower(first_name)&quot;</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;index_users_on_lower_first_name&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Optimizing LIKE queries</h3>

<p>Optimizing queries with <code>LIKE</code> clause is simple; you just need to remember about two things:</p>

<ol>
<li>Forget about B-Tree Index for this case.</li>
<li>Take advantage of trigram matching provided by <a href="https://www.postgresql.org/docs/10/static/pgtrgm.html">pg_trgm</a> extension.</li>
</ol>


<p>To avoid sequential scans and utilize index that will drastically improve the performance of this kind of queries, enable the extension and create a GIN or GiST index:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">execute</span> <span class="s2">&quot;CREATE EXTENSION pg_trgm;&quot;</span>
</span><span class='line'><span class="n">execute</span> <span class="s2">&quot;CREATE INDEX CONCURRENTLY index_products_on_description_trigram ON clients USING gin(description gin_trgm_ops);&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thanks to this index, this is a query plan you might expect when filtering <code>Products</code> by <code>descriptions</code> containing some text, with wildcards on both the beginning and the end:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">EXPLAIN</span> <span class="k">for</span><span class="p">:</span> <span class="no">SELECT</span> <span class="s2">&quot;products&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;products&quot;</span> <span class="no">WHERE</span> <span class="p">(</span><span class="n">products</span><span class="o">.</span><span class="n">description</span> <span class="no">ILIKE</span> <span class="s1">&#39;%some text with wildacards%&#39;</span><span class="p">)</span>
</span><span class='line'>                                                <span class="no">QUERY</span> <span class="no">PLAN</span>
</span><span class='line'><span class="o">-----------------------------------------------------------------------------------------------------------</span>
</span><span class='line'> <span class="no">Bitmap</span> <span class="no">Heap</span> <span class="no">Scan</span> <span class="n">on</span> <span class="n">products</span>
</span><span class='line'>   <span class="no">Recheck</span> <span class="ss">Cond</span><span class="p">:</span> <span class="p">(</span><span class="n">description</span> <span class="o">~~*</span> <span class="s1">&#39;%some text with wildacards%&#39;</span><span class="o">::</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>   <span class="o">-&gt;</span>  <span class="no">Bitmap</span> <span class="no">Index</span> <span class="no">Scan</span> <span class="n">on</span> <span class="n">index_products_on_description_trigram</span>
</span><span class='line'>         <span class="no">Index</span> <span class="ss">Cond</span><span class="p">:</span> <span class="p">(</span><span class="n">description</span> <span class="o">~~*</span> <span class="s1">&#39;%some text with wildacards%&#39;</span><span class="o">::</span><span class="n">text</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Ordering</h3>

<p>B-tree indexes are sorted in an ascending order which we can use to our advantage to avoid performing sorting in memory. However, we also need to keep in mind the limitation of the data structure itself. A rule of thumb for efficient ordering would be: order by the same columns you perform filtering by. It is going to be the case by default when you don&rsquo;t explicitly add any <code>ORDER</code> clause since the indexes are ordered. But if it happens that you need to apply different ordering criteria, you can take advantage of <code>order</code> option and explicitly specify the order:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">add_index</span> <span class="ss">:products</span><span class="p">,</span> <span class="ss">:created_at</span><span class="p">,</span> <span class="ss">order</span><span class="p">:</span> <span class="p">{</span> <span class="n">created_at</span><span class="p">:</span> <span class="ss">:desc</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Adding indexes concurrently</h3>

<p>The way how the indexes are added doesn&rsquo;t impact the performance once they are created; however, it&rsquo;s good to keep in mind that just simple <code>CREATE INDEX</code> will block concurrent writes (inserts, updates, and deletes) until it&rsquo;s finished. It can lead to some issues, including deadlocks, especially when the index is getting created for a huge table under massive write operations.</p>

<p>To prevent such a problem, it&rsquo;s worth creating indexes <a href="https://www.postgresql.org/docs/10/static/sql-createindex.html#SQL-CREATEINDEX-CONCURRENTLY">concurrently</a> instead. You can do that in Rails using <code>algorithm: :concurrently</code> option and by making sure that the index creation will run outside of a transaction by calling <code>disable_ddl_transaction!</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">AddIndexToAsksActive</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span><span class="o">[</span><span class="mi">5</span><span class="o">.</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>  <span class="n">disable_ddl_transaction!</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">add_index</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">:active</span><span class="p">,</span> <span class="ss">algorithm</span><span class="p">:</span> <span class="ss">:concurrently</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is one caveat here though. If you attempt to create a unique index concurrently, there is a possibility that something will go wrong, e.g., when a non-unique record is created during the index creation. Since the command is run outside the transaction, it won&rsquo;t be rolled back, and you will end up with an invalid index. Nevertheless, that is not a big problem &ndash; should it ever happen, just drop the invalid index and try creating it concurrently one more time.</p>

<h2>Wrapping up</h2>

<p>Optimizing <strong>PostgreSQL queries</strong> might not look a trivial task, but if you keep these rules in mind, you will have much easier time with your database, and you will enjoy fast queries for a long time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trolling In Ruby - Implementing JavaScript-like Maths With Implicit Conversion Hijacking]]></title>
    <link href="https://karolgalanciak.com/blog/2018/07/29/trolling-in-ruby-implementing-javascript-like-maths-with-implicit-conversion-hijacking/"/>
    <updated>2018-07-29T20:00:00+02:00</updated>
    <id>https://karolgalanciak.com/blog/2018/07/29/trolling-in-ruby-implementing-javascript-like-maths-with-implicit-conversion-hijacking</id>
    <content type="html"><![CDATA[<p>If you&rsquo;ve ever worked with <strong>JavaScript</strong>, especially in <strong>pre-SPA/pre-frameworks</strong> era with just <strong>jQuery</strong>, you probably had a chance to see an &ldquo;exotic&rdquo; maths in action that looks similar to this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;3&quot;</span> <span class="o">+</span> <span class="mi">4</span>
</span><span class='line'><span class="c1">// =&gt; &quot;34&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That kind of behavior usually comes as a <strong>big surprise</strong> and due to that fact, JavaScript has gotten some <strong>bad reputation</strong> (even though there is a <a href="https://karolgalanciak.com/blog/2017/01/22/javascript-the-surprising-parts/">rationale</a> behind it). If we tried that in <strong>Ruby</strong>, we would get an obvious <code>TypeError</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;3&quot;</span> <span class="o">+</span> <span class="mi">4</span>
</span><span class='line'><span class="c1"># =&gt; TypeError (no implicit conversion of Integer into String)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Would it be possible though to obtain the same result somehow in Ruby?</p>

<h2>Explicit Conversion vs. Implicit Conversion</h2>

<p>The answer is yes! But before we get to the actual implementation of that concept, let&rsquo;s make sure that we understand some essential concepts in Ruby that will lead us there: <strong>explicit conversion</strong> and <strong>implicit conversion</strong>.</p>

<p>You&rsquo;ve probably used methods like <code>to_s</code>, <code>to_i</code>, <code>to_d</code>, <code>to_a</code> etc. for <em>explicit</em> typecasting. That way, we can get the closest representation of a given object in a different type.</p>

<p>However, there is also a second type of conversion in Ruby, which is <strong>implicit conversion</strong>.  Those are the methods like <code>to_str</code>, <code>to_int</code>, <code>to_hash</code>, <code>to_ary</code>. In most cases, you should not use those methods unless you are implementing an object that kind of behaves like some type, so, e.g., all numeric objects could (and they actually do!) implement <code>to_int</code> method as they are kind of the same type. For the same reason, if we were implementing some type of collection, we could implement <code>to_ary</code> method that would just return the same result as <code>to_a</code>  which would be an instance of Array, but that we way put extra emphasis on the fact that this object behaves like an array.</p>

<p>We could also take advantage of implicit conversion to put some extra boundaries on the collaborating objects.  Implicit conversion is widely used in Ruby for that purpose. When you are adding a string to a string like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="s2">&quot;3&quot;</span> <span class="o">+</span> <span class="s2">&quot;4&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby under the hood calls &ldquo;4&rdquo;.to_str to get the string representation of that object (which is already a string) to make <code>+</code> method more flexible, but at the same time, it makes sure that only string-like objects are permitted as arguments.</p>

<h2>Hijacking Implicit Conversion</h2>

<p>Let&rsquo;s get back to the original problem which was: how to get the following result in Ruby?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;3&quot;</span> <span class="o">+</span> <span class="mi">4</span>
</span><span class='line'><span class="c1"># =&gt; &quot;34&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Based on what we&rsquo;ve just learned about implicit conversion, we just need to make sure that integers become somehow string-like objects. Let&rsquo;s monkey patch <code>Integer</code> class and add <code>to_str</code> method that would be an alias to <code>to_s</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Integer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_str</span>
</span><span class='line'>    <span class="nb">to_s</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s try out crazy maths again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;3&quot;</span> <span class="o">+</span> <span class="mi">4</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;34&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Try the same for JavaScript and compare the results, it should be exactly the same.</p>

<h2>Wrapping up</h2>

<p><strong>Ruby</strong> is an extremely <strong>flexible</strong> language which makes is it easy to do crazy things, just like it is the case with some operations in <strong>JavaScript</strong> ;).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails And Conditional Validations In Models]]></title>
    <link href="https://karolgalanciak.com/blog/2018/06/24/rails-and-conditional-validations-in-models/"/>
    <updated>2018-06-24T20:00:00+02:00</updated>
    <id>https://karolgalanciak.com/blog/2018/06/24/rails-and-conditional-validations-in-models</id>
    <content type="html"><![CDATA[<p>Adding consents for accepting Terms of Service/Privacy Policies must have been a top popular feature in the majority of the applications due to enforcement of <strong>GDPR</strong> in May ;). From the technical aspects that GDPR requires, there is a proof of consent for processing the personal information. In that case, you need to have some actual attributes in the database that would confirm the fact that some user has indeed accepted Terms of Service/Privacy Policy.</p>

<p>That makes a significant impact on how we approach this kind of features. However, in the past, such things were quite often not stored in a database at all &ndash; it just took some UI <strong>acceptance validation</strong> or maybe a <strong>validation of the virtual attribute</strong> on the backend to be on the safe side.</p>

<p>Let&rsquo;s focus on the latter case where we don&rsquo;t need to store anything in DB and see what the possible solutions to that problems are. As <strong>trivial</strong> as this problem initially sounds, it will get <strong>quite interesting</strong> ;).</p>

<!--more-->


<h2>Anatomy Of The Problem</h2>

<p>We want to make sure a user accepts Terms of Service during the signup process and to be sure that it is indeed validated, even if JavaScript validation fails in UI, we want to validate that fact on the backend.</p>

<h2>Solution 1 &ndash; Just add a virtual attribute to the model and validate it</h2>

<p>It is probably the most straightforward approach to that problem and most likely the least elegant. That&rsquo;s how we could implement it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># app/models/user.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:terms_of_service_accepted</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:terms_of_service_accepted</span><span class="p">,</span> <span class="ss">acceptance</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, it does work, no doubt about that. But currently, the validation will always be triggered, even during updates, which doesn&rsquo;t make much sense. We need to find a better solution.</p>

<h2>Solution 2 &ndash; Add a virtual attribute to the model and validate it only during the creation of a user</h2>

<p>A minor improvement over the previous version, we make sure that the validation is not triggered by updates, but only when creating a user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># app/models/user.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:terms_of_service_accepted</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:terms_of_service_accepted</span><span class="p">,</span> <span class="ss">acceptance</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">on</span><span class="p">:</span> <span class="ss">:create</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Even if it solves the actual problem, there is a big issue about that &ndash; the validation will always be triggered during a creation, even when creating users from factories! What other options do we have?</p>

<h2>Solution 3 &ndash; Add a virtual attribute to the model and validate it only for a specific context</h2>

<p>What is interesting in ActiveModel validations is that <code>on</code> option is not limited to <code>:create</code> or <code>:update</code> contexts &ndash; those are merely the ones that ActiveRecord sets by default depending on the persistence status of the model. We can provide a custom context for both <code>valid?</code> and <code>save</code> methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">valid?</span><span class="p">(</span><span class="ss">:registration</span><span class="p">)</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="ss">context</span><span class="p">:</span> <span class="ss">:registration</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In that case, we could replace <code>:create</code> context with <code>:registration</code> context for the acceptance validation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># app/models/user.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:terms_of_service_accepted</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:terms_of_service_accepted</span><span class="p">,</span> <span class="ss">acceptance</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">on</span><span class="p">:</span> <span class="ss">:registration</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, this is still not ideal &ndash; a global model which is used in multiple contexts has some logic that only applies to just one use case, and what is even worse, it&rsquo;s for an UI concern.</p>

<p>Let&rsquo;s try to find a solution that doesn&rsquo;t add any unnecessary mess to a model.</p>

<h2>Solution 4 &ndash; Use form object</h2>

<p>Using form object is probably the cleanest solution to our problem &ndash; we don&rsquo;t introduce any additional concerns to a model which should not be there, and we handle everything in a dedicated object. The are multiple ways how to implement a form object: we could create another ActiveModel model and take advantage of <a href="https://github.com/Azdaroth/active_model_attributes">ActiveModel Attributes</a> to make it smoother. We could use <a href="http://dry-rb.org/gems/dry-validation/basics/working-with-schemas/">dry-validation</a> gem for that. Or we could use my favorite tool for that purpose: <a href="https://github.com/trailblazer/reform">reform</a> gem from <a href="http://trailblazer.to">Trailblazer</a> stack.</p>

<p>Explaining the entire API of <code>reform</code> gem is way beyond the scope of this article, but the following implementation should be quite self-explanatory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># app/forms/user/registration_form.rb</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;reform/form/coercion&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span><span class="o">::</span><span class="no">RegistrationForm</span> <span class="o">&lt;</span> <span class="ss">Reform</span><span class="p">:</span><span class="ss">:Form</span>
</span><span class='line'>  <span class="c1"># other property declarations and validations</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">property</span> <span class="ss">:terms_of_service_accepted</span><span class="p">,</span> <span class="ss">virtual</span><span class="p">:</span> <span class="ss">:true</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="ss">Types</span><span class="p">:</span><span class="ss">:Form</span><span class="o">::</span><span class="no">Boolean</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:terms_of_service_accepted</span><span class="p">,</span> <span class="ss">acceptance</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Besides handling other properties (most likely <code>email</code>, <code>password</code> and <code>password confirmation</code>), we are adding a virtual <code>terms_of_service_accepted</code> attribute with explicit type and adding acceptance validation using ActiveModel validator.</p>

<p>Even though using form objects is the cleanest approach, it requires some extra overhead, mostly with the setup, and sometimes it might be painful to add that setup, especially when extending third party&rsquo;s logic, e.g. <a href="https://github.com/scambra/devise_invitable">devise_invitable</a>. In such case, we would need some heavy customization which could potentially break when updating a gem and we would also need extra test coverage for the custom solution. It might still be worth introducing a form object, but it would be a good idea to consider other potential solutions. What option do we have left?</p>

<h2>Solution 5 &ndash; Extend user&rsquo;s instance with a custom logic</h2>

<p>Have you ever heard of DCI (Data Context Interaction) paradigm? If yes, you might have seen something like that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="ss">User</span><span class="p">:</span><span class="ss">:RegistrationContext</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>What this code does is adding extra functionality from <code>User::RegistrationContext</code> module to user&rsquo;s singleton class. Effectively, it means that we are not adding any additional logic to all User class instances, but only to that particular instance. Sounds like exactly what we need! That way, we can solve our problem achieving all the other goals as well &ndash; ease of extending the logic without too much overhead and without making a mess in the model.</p>

<p>Here is how our implementation of <code>User::RegistrationContext</code> context module could look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># app/models/user/registration_context.rb</span>
</span><span class='line'><span class="k">module</span> <span class="nn">User::RegistrationContext</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">extended</span><span class="p">(</span><span class="n">model</span><span class="p">)</span>
</span><span class='line'>    <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="n">model</span>
</span><span class='line'>      <span class="n">validates</span> <span class="ss">:terms_of_service_accepted</span><span class="p">,</span> <span class="ss">acceptance</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:terms_of_service_accepted</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The interesting thing about this implementation is that there is some singletons&#8217; inception going on there &ndash; first, we are using <code>extend</code> itself on the model, and then, in <code>extended</code> module hook we are opening singleton class of the model and declaring validation there. However, this is necessary since <code>validates</code> method is not defined in the context of that module, and we need to do that in the context of the model.</p>

<p>Let&rsquo;s try our fancy solution in action:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="ss">User</span><span class="p">:</span><span class="ss">:RegistrationContext</span><span class="p">)</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">terms_of_service_accepted</span> <span class="o">=</span> <span class="s2">&quot;0&quot;</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">valid?</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">messages</span><span class="o">[</span><span class="ss">:terms_of_service_accepted</span><span class="o">]</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;must be accepted&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Perfect, that&rsquo;s exactly what we needed!</p>

<h2>Wrapping Up</h2>

<p>There are multiple ways in Rails (or Ruby in general) to handle <strong>conditional validation</strong>, and thanks to the flexibility of the framework and the language, we can pick whatever seems best for our particular problem &ndash; from adding additional validations in a model with <strong>extra ActiveModel context</strong>, through using <strong>form objects</strong>, ending with arcane DCI-style object&rsquo;s extensions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Case for before_validation callback: complex state normalization]]></title>
    <link href="https://karolgalanciak.com/blog/2018/05/27/the-case-for-before-validation-callback-complex-state-normalization/"/>
    <updated>2018-05-27T20:00:00+02:00</updated>
    <id>https://karolgalanciak.com/blog/2018/05/27/the-case-for-before-validation-callback-complex-state-normalization</id>
    <content type="html"><![CDATA[<p>Few months ago I wrote a <a href="https://karolgalanciak.com/blog/2017/10/29/the-case-against-exotic-usage-of-before-validate-callbacks/">blog post</a> about <strong>ActiveRecord</strong> <code>before_validation</code> callback and how it is used for  <strong>wrong reasons</strong> and concluded that in most cases this is not something we should be using routinely. However, I missed one <strong>appropriate use case</strong> for it which might be quite common in Rails apps, so this might be an excellent opportunity to get back to  <strong>before_validation callback</strong> and show its other side.</p>

<!--more-->


<h2>Anatomy Of The Problem</h2>

<p>Imagine that we have a <code>Payment</code> model where we need to store <code>amount</code> and <code>currency</code>. However, for statistical purposes, we also want to store normalized amount in USD currency with exchange rate applied at the time of payment&rsquo;s creation. As this is a significant part of our domain, we want to add validation for <code>amount_in_usd</code> attribute. Our Payment model looks like this at the moment:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Payment</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:amount</span><span class="p">,</span> <span class="ss">:currency</span><span class="p">,</span> <span class="ss">:amount_in_usd</span><span class="p">,</span> <span class="n">presence</span> <span class="ss">:true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The question is: where do we get <code>amount_in_usd</code> from and how can we assign it?</p>

<h2>The Solution</h2>

<p>One way of solving that problem would be a direct assignment when populating all the attributes. In that case, it would look a bit like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">Payment</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">currency</span><span class="p">:</span> <span class="n">currency</span><span class="p">,</span> <span class="ss">amount</span><span class="p">:</span> <span class="n">amount</span><span class="p">,</span> <span class="n">amount_in_usd</span><span class="p">:</span> <span class="no">CurrencyExchanger</span><span class="o">.</span><span class="n">exchange</span><span class="p">(</span><span class="n">amount</span><span class="p">,</span> <span class="ss">from</span><span class="p">:</span> <span class="n">currency</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="s2">&quot;USD&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem with that solution is that this logic would need to be repeated in every place where payment gets initialized. We could implement a factory class that would be reused in all scenarios to keep it DRY, but that&rsquo;s some extra overhead that is not popular in a Rails world. Also, this sounds like a responsibility of the Payment model itself as it is about managing its internal state.</p>

<p>Here, we can&rsquo;t solve this by overriding writers as I suggested <a href="https://karolgalanciak.com/blog/2017/10/29/the-case-against-exotic-usage-of-before-validate-callbacks/">before</a> as <code>amount_in_usd</code> depends on two attributes: <code>currency</code> and <code>amount</code>, and we don&rsquo;t know in which sequence the attributes will be assigned.</p>

<p>And this is exactly the case where <code>before_validation</code> is useful: for complex state normalization where multiple attributes are involved. With that callback, a solution looks quite elegant and just simpler:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Payment</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:amount</span><span class="p">,</span> <span class="ss">:currency</span><span class="p">,</span> <span class="ss">:amount_in_usd</span><span class="p">,</span> <span class="n">presence</span> <span class="ss">:true</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before_validation</span> <span class="ss">:assign_amount_in_usd</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">assign_amount_in_usd</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">currency</span> <span class="o">&amp;&amp;</span> <span class="n">amount</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">amount_in_usd</span> <span class="o">=</span> <span class="no">CurrencyExchanger</span><span class="o">.</span><span class="n">exchange</span><span class="p">(</span><span class="n">amount</span><span class="p">,</span> <span class="ss">from</span><span class="p">:</span> <span class="n">currency</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="s2">&quot;USD&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Alternative Solution</h2>

<p>In the first paragraph, I mentioned that this solution could work especially well in Rails apps. What I meant by that is the fact that usually, the &ldquo;primitive&rdquo; attributes coming from HTTP params are mass-assigned to the model. Of course in Ruby, everything is an object, but to keep things simpler, let&rsquo;s treat numeric types and strings as primitives.</p>

<p>What would be a non-primitive value though? In our case, we have something that is widely used as a typical example of a value object: <strong>Money</strong> object that is composed of <code>amount</code> and <code>currency</code>.  If the attributes before the assignment were mapped to some more domain-oriented objects, we would have an even simpler solution for our problem:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">money</span> <span class="o">=</span> <span class="no">Money</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">amount</span><span class="p">,</span> <span class="n">currency</span><span class="p">)</span>
</span><span class='line'><span class="no">Payment</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">money</span><span class="p">:</span> <span class="n">money</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>and the model would look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Payment</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:amount</span><span class="p">,</span> <span class="ss">:currency</span><span class="p">,</span> <span class="ss">:amount_in_usd</span><span class="p">,</span> <span class="n">presence</span> <span class="ss">:true</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">money</span><span class="o">=</span><span class="p">(</span><span class="n">money_object</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">amount</span> <span class="o">=</span> <span class="n">money_object</span><span class="o">.</span><span class="n">amount</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">currency</span> <span class="o">=</span> <span class="n">money_object</span><span class="o">.</span><span class="n">currency</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">amount_in_usd</span> <span class="o">=</span> <span class="no">CurrencyExchanger</span><span class="o">.</span><span class="n">exchange_money</span><span class="p">(</span><span class="n">money_object</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="s2">&quot;USD&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It might look like extra overhead that is not necessary. However, value objects tend to simplify and DRY a lot of things in the code, so for more complex apps, using value objects will be worth that extra overhead.</p>

<h2>Wrapping Up</h2>

<p>There are some cases where <code>before_validation</code> callback might be useful. However, in more complex apps, using value object might be an alternative worth looking into.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced Ember Data Customization - Different Model Types in Ember App and API For The Same Resource]]></title>
    <link href="https://karolgalanciak.com/blog/2018/04/28/advanced-ember-data-customization-different-model-types-in-ember-app-and-api-for-the-same-resource/"/>
    <updated>2018-04-28T19:00:00+02:00</updated>
    <id>https://karolgalanciak.com/blog/2018/04/28/advanced-ember-data-customization-different-model-types-in-ember-app-and-api-for-the-same-resource</id>
    <content type="html"><![CDATA[<p>A <strong>great advantage</strong> of using <strong>Ember Data</strong> with <strong>JSONAPI-compliant</strong> adapters/serializers is that there is almost nothing extra needed to work with the <strong>data layer</strong> &ndash; just create the models with names matching the types of the resources returned by the <strong>API</strong> and you are good to go! However, sometimes you may need to customize the naming which means that the names of the models in the <strong>Ember application</strong> will be different than the ones expected by the API and their corresponding types. What are the steps required to make it work in <strong>Ember Data</strong>?</p>

<!--more-->


<h2>Anatomy Of The Problem</h2>

<p>Imagine that the API you work with has two resources: <code>User</code> and <code>Picture</code> and that a User can have many Pictures. However, in the Ember application, you want to have these resources named as <code>Photographer</code> and <code>Photo</code>. Here are the models and relationships between them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// app/models/photographer.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Model</span> <span class="nx">from</span> <span class="s1">&#39;ember-data/model&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">hasMany</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;ember-data/relationships&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">MessageSender</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">photos</span><span class="o">:</span> <span class="nx">hasMany</span><span class="p">(</span><span class="s1">&#39;photo&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// app/models/photo.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Model</span> <span class="nx">from</span> <span class="s1">&#39;ember-data/model&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">belongsTo</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;ember-data/relationships&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">photographer</span><span class="o">:</span> <span class="nx">belongsTo</span><span class="p">(</span><span class="s1">&#39;photographer&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The Solution</h2>

<p>Unfortunately, models&#8217; names don&rsquo;t follow the naming expected by the API. There are a couple of things that we need to customize here:</p>

<ol>
<li>Endpoints for a given resource &ndash; by default, for <code>Photographer</code> model, all requests will be performed to <code>/photographers</code> endpoint. We need to make it work with <code>/users</code> endpoint. Same thing with <code>Photo</code> model.</li>
<li>Serialization of the models &ndash; for <code>Photographers</code> we will need to make sure that <code>users</code> type is present in the payload, not <code>photographers</code> and the same thing for <code>pictures</code> vs. <code>photos</code>.</li>
<li>Normalization of the payload from the API &ndash; we need to map <code>user</code> type to <code>photographer</code> and <code>picture</code> type to <code>photo</code>.</li>
<li>Handle the relationship between <code>Photographer</code> and <code>Photo</code> with proper types.</li>
</ol>


<p>Let&rsquo;s handle each case one by one.</p>

<p>The first one is quite straightforward &ndash; we need to adjust adapters for both models. According to the <a href="https://guides.emberjs.com/v3.0.0/models/customizing-adapters/#toc_path-customization">docs</a>, <code>pathForType</code> method is the one that we care about. Since we are just going to change the type, not the actual logic that happens to that type later, we can handle these adjustments the following way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// app/adapters/application.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">DS</span> <span class="nx">from</span> <span class="s1">&#39;ember-data&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">JSONAPIAdapter</span><span class="p">.</span><span class="nx">extend</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// app/adapters/photographer.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">ApplicationAdapter</span> <span class="nx">from</span> <span class="s1">&#39;./application&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">ApplicationAdapter</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">pathForType</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_super</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// app/adapters/photo.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">ApplicationAdapter</span> <span class="nx">from</span> <span class="s1">&#39;./application&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">ApplicationAdapter</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">pathForType</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_super</span><span class="p">(</span><span class="s1">&#39;picture&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first part is done. Let&rsquo;s focus now on the serialization. After a bit of research of the docs and the source code, it looks like <code>payloadKeyFromModelName</code> needs to be customized. In this case, we just want to make sure that <code>photographer</code> type is mapped to <code>user</code>, and <code>photo</code> is mapped to <code>picture</code>. As this is arguably a less straightforward change than overriding <code>pathForType</code> in adapters, it might make sense to write some unit tests for that. Fortunately, it&rsquo;s nothing too complex &ndash; just comparing the serialization result with the expected one. Let&rsquo;s write a test for <code>ApplicationSerializer</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// tests/unit/serializers/application-test.js</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">module</span><span class="p">,</span> <span class="nx">test</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;qunit&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">setupTest</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;ember-qunit&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">run</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;@ember/runloop&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;Unit | Serializer | application&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">hooks</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">setupTest</span><span class="p">(</span><span class="nx">hooks</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">module</span><span class="p">(</span><span class="s1">&#39;serialize&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">module</span><span class="p">(</span><span class="s1">&#39;photographer&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">test</span><span class="p">(</span><span class="s1">&#39;it is serialized according to remapped naming&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">assert</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">assert</span><span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">let</span> <span class="nx">store</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">owner</span><span class="p">.</span><span class="nx">lookup</span><span class="p">(</span><span class="s1">&#39;service:store&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">run</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">let</span> <span class="nx">model</span> <span class="o">=</span> <span class="nx">store</span><span class="p">.</span><span class="nx">createRecord</span><span class="p">(</span><span class="s1">&#39;photographer&#39;</span><span class="p">,</span> <span class="p">{});</span>
</span><span class='line'>          <span class="kd">let</span> <span class="nx">payload</span> <span class="o">=</span> <span class="nx">model</span><span class="p">.</span><span class="nx">serialize</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>          <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">payload</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span> <span class="s1">&#39;users&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">module</span><span class="p">(</span><span class="s1">&#39;photo&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">test</span><span class="p">(</span><span class="s1">&#39;it is serialized according to its naming&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">assert</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">assert</span><span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">let</span> <span class="nx">store</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">owner</span><span class="p">.</span><span class="nx">lookup</span><span class="p">(</span><span class="s1">&#39;service:store&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">run</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">let</span> <span class="nx">model</span> <span class="o">=</span> <span class="nx">store</span><span class="p">.</span><span class="nx">createRecord</span><span class="p">(</span><span class="s1">&#39;photo&#39;</span><span class="p">,</span> <span class="p">{});</span>
</span><span class='line'>          <span class="kd">let</span> <span class="nx">payload</span> <span class="o">=</span> <span class="nx">model</span><span class="p">.</span><span class="nx">serialize</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>          <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">payload</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span> <span class="s1">&#39;pictures&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since we are interested only in a type remapping, we don&rsquo;t check the entire payload, only <code>type</code> attribute. Let&rsquo;s make these tests pass by either remapping types or using the default logic:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// app/serializers/application.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">DS</span> <span class="nx">from</span> <span class="s1">&#39;ember-data&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">keysMappingForSerialization</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;photographer&#39;</span><span class="o">:</span> <span class="s1">&#39;user&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;photo&#39;</span><span class="o">:</span> <span class="s1">&#39;picture&#39;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">JSONAPISerializer</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">payloadKeyFromModelName</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">keysMappingForSerialization</span><span class="p">[</span><span class="nx">key</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_super</span><span class="p">(</span><span class="nx">keysMappingForSerialization</span><span class="p">[</span><span class="nx">key</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_super</span><span class="p">(...</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Awesome, we are almost there.</p>

<p>Both third and fourth points are actually about normalization, so we are going to handle them together. Again, after some research, it looks like we need to customize <code>modelNameFromPayloadKey</code> to map types returned by API to corresponding types in our app and also override <code>keyForRelationship</code> method to handle relationships in the payload correctly. Again, let&rsquo;s start with some tests. The simplest way to test such things is checking the result of <a href="https://emberjs.com/api/ember-data/3.0/classes/DS.JSONAPISerializer/methods/normalizeResponse?anchor=normalizeResponse">normalizeResponse</a> for some request type, e.g., for &lsquo;findAll&rsquo;. Let&rsquo;s write a test for a more complex scenario including relationships and sideloading as well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// tests/unit/serializers/application-test.js</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">module</span><span class="p">,</span> <span class="nx">test</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;qunit&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">setupTest</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;ember-qunit&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">run</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;@ember/runloop&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;Unit | Serializer | application&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">hooks</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">setupTest</span><span class="p">(</span><span class="nx">hooks</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">module</span><span class="p">(</span><span class="s1">&#39;serialize&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// previous tests</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">module</span><span class="p">(</span><span class="s1">&#39;normalizeResponse&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">module</span><span class="p">(</span><span class="s1">&#39;photographer&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">test</span><span class="p">(</span><span class="s1">&#39;it is normalized according to remapped naming&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">assert</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">assert</span><span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">let</span> <span class="nx">store</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">owner</span><span class="p">.</span><span class="nx">lookup</span><span class="p">(</span><span class="s1">&#39;service:store&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">let</span> <span class="nx">serializer</span> <span class="o">=</span> <span class="nx">store</span><span class="p">.</span><span class="nx">serializerFor</span><span class="p">(</span><span class="s1">&#39;photographer&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">run</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">let</span> <span class="nx">payload</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="s1">&#39;data&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="s1">&#39;type&#39;</span><span class="o">:</span> <span class="s1">&#39;users&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="s1">&#39;id&#39;</span><span class="o">:</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="s1">&#39;attributes&#39;</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>              <span class="s1">&#39;relationships&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="s1">&#39;pictures&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                  <span class="s1">&#39;links&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                    <span class="s1">&#39;self&#39;</span><span class="o">:</span> <span class="s1">&#39;https://host.test/api/v1/users/1/relationships/pictures&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s1">&#39;related&#39;</span><span class="o">:</span> <span class="s1">&#39;https://host.test/api/v1/users/1/pictures&#39;</span>
</span><span class='line'>                  <span class="p">},</span>
</span><span class='line'>                  <span class="s1">&#39;data&#39;</span><span class="o">:</span> <span class="p">[{</span> <span class="s1">&#39;type&#39;</span><span class="o">:</span> <span class="s1">&#39;pictures&#39;</span><span class="p">,</span> <span class="s1">&#39;id&#39;</span><span class="o">:</span> <span class="s1">&#39;10&#39;</span> <span class="p">}]</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="s1">&#39;included&#39;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                <span class="s1">&#39;type&#39;</span><span class="o">:</span> <span class="s1">&#39;pictures&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;id&#39;</span><span class="o">:</span> <span class="s1">&#39;10&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;attributes&#39;</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>                <span class="s1">&#39;links&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                  <span class="s1">&#39;self&#39;</span><span class="o">:</span> <span class="s1">&#39;https://host.test/api/v1/pictures/10&#39;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>            <span class="p">]</span>
</span><span class='line'>          <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>          <span class="kd">let</span> <span class="nx">normalizedPayload</span> <span class="o">=</span> <span class="nx">serializer</span><span class="p">.</span><span class="nx">normalizeResponse</span><span class="p">(</span><span class="nx">store</span><span class="p">,</span> <span class="nx">store</span><span class="p">.</span><span class="nx">modelFor</span><span class="p">(</span><span class="s1">&#39;photographer&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="nx">payload</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;findAll&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="kd">let</span> <span class="nx">expectedPayload</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="s1">&#39;data&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="s1">&#39;attributes&#39;</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>              <span class="s1">&#39;id&#39;</span><span class="o">:</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="s1">&#39;relationships&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="s1">&#39;emails&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                  <span class="s1">&#39;data&#39;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                    <span class="p">{</span> <span class="s1">&#39;id&#39;</span><span class="o">:</span> <span class="s1">&#39;10&#39;</span><span class="p">,</span> <span class="s1">&#39;type&#39;</span><span class="o">:</span> <span class="s1">&#39;photos&#39;</span> <span class="p">}</span>
</span><span class='line'>                  <span class="p">],</span>
</span><span class='line'>                  <span class="s1">&#39;links&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                    <span class="s1">&#39;self&#39;</span><span class="o">:</span> <span class="s1">&#39;https://host.test/api/v1/users/1/relationships/pictures&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s1">&#39;related&#39;</span><span class="o">:</span> <span class="s1">&#39;https://host.test/api/v1/users/1/pictures&#39;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>              <span class="p">},</span>
</span><span class='line'>              <span class="s1">&#39;type&#39;</span><span class="o">:</span> <span class="s1">&#39;photographer&#39;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="s1">&#39;included&#39;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                <span class="s1">&#39;attributes&#39;</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>                <span class="s1">&#39;id&#39;</span><span class="o">:</span> <span class="s1">&#39;10&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;relationships&#39;</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>                <span class="s1">&#39;type&#39;</span><span class="o">:</span> <span class="s1">&#39;photo&#39;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>            <span class="p">]</span>
</span><span class='line'>          <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>          <span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">normalizedPayload</span><span class="p">,</span> <span class="nx">expectedPayload</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">module</span><span class="p">(</span><span class="s1">&#39;photo&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">test</span><span class="p">(</span><span class="s1">&#39;it is normalized according to remapped naming&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">assert</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">assert</span><span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">let</span> <span class="nx">store</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">owner</span><span class="p">.</span><span class="nx">lookup</span><span class="p">(</span><span class="s1">&#39;service:store&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">let</span> <span class="nx">serializer</span> <span class="o">=</span> <span class="nx">store</span><span class="p">.</span><span class="nx">serializerFor</span><span class="p">(</span><span class="s1">&#39;photo&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">run</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">let</span> <span class="nx">payload</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="s1">&#39;data&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="s1">&#39;type&#39;</span><span class="o">:</span> <span class="s1">&#39;pictures&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="s1">&#39;id&#39;</span><span class="o">:</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="s1">&#39;attributes&#39;</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>              <span class="s1">&#39;relationships&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="s1">&#39;user&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                  <span class="s1">&#39;links&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                    <span class="s1">&#39;self&#39;</span><span class="o">:</span> <span class="s1">&#39;https://host.test/api/v1/pictures/1/relationships/user&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s1">&#39;related&#39;</span><span class="o">:</span> <span class="s1">&#39;https://host.test/api/v1/pictures/1/user&#39;</span>
</span><span class='line'>                  <span class="p">},</span>
</span><span class='line'>                  <span class="s1">&#39;data&#39;</span><span class="o">:</span> <span class="p">{</span> <span class="s1">&#39;type&#39;</span><span class="o">:</span> <span class="s1">&#39;users&#39;</span><span class="p">,</span> <span class="s1">&#39;id&#39;</span><span class="o">:</span> <span class="s1">&#39;10&#39;</span> <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="s1">&#39;included&#39;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                <span class="s1">&#39;type&#39;</span><span class="o">:</span> <span class="s1">&#39;users&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;id&#39;</span><span class="o">:</span> <span class="s1">&#39;10&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;attributes&#39;</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>                <span class="s1">&#39;links&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                  <span class="s1">&#39;self&#39;</span><span class="o">:</span> <span class="s1">&#39;https://host.test/api/v1/users/10&#39;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>            <span class="p">]</span>
</span><span class='line'>          <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>          <span class="kd">let</span> <span class="nx">normalizedPayload</span> <span class="o">=</span> <span class="nx">serializer</span><span class="p">.</span><span class="nx">normalizeResponse</span><span class="p">(</span><span class="nx">store</span><span class="p">,</span> <span class="nx">store</span><span class="p">.</span><span class="nx">modelFor</span><span class="p">(</span><span class="s1">&#39;photo&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="nx">payload</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;findAll&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="kd">let</span> <span class="nx">expectedPayload</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="s1">&#39;data&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="s1">&#39;attributes&#39;</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>              <span class="s1">&#39;id&#39;</span><span class="o">:</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="s1">&#39;relationships&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="s1">&#39;photographer&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                  <span class="s1">&#39;data&#39;</span><span class="o">:</span> <span class="p">{</span> <span class="s1">&#39;id&#39;</span><span class="o">:</span> <span class="s1">&#39;10&#39;</span><span class="p">,</span> <span class="s1">&#39;type&#39;</span><span class="o">:</span> <span class="s1">&#39;photographer&#39;</span> <span class="p">},</span>
</span><span class='line'>                  <span class="s1">&#39;links&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                    <span class="s1">&#39;related&#39;</span><span class="o">:</span> <span class="s1">&#39;https://host.test/api/v1/pictures/1/user&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s1">&#39;self&#39;</span><span class="o">:</span> <span class="s1">&#39;https://host.test/api/v1/pictures/1/relationships/user&#39;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>              <span class="p">},</span>
</span><span class='line'>              <span class="s1">&#39;type&#39;</span><span class="o">:</span> <span class="s1">&#39;photo&#39;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="s1">&#39;included&#39;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                <span class="s1">&#39;attributes&#39;</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>                <span class="s1">&#39;id&#39;</span><span class="o">:</span> <span class="s1">&#39;10&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;relationships&#39;</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>                <span class="s1">&#39;type&#39;</span><span class="o">:</span> <span class="s1">&#39;photographer&#39;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>            <span class="p">]</span>
</span><span class='line'>          <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>          <span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">normalizedPayload</span><span class="p">,</span> <span class="nx">expectedPayload</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>First, let&rsquo;s make it work with nonrelationship-related part, i.e. <code>modelNameFromPayloadKey</code> customization:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// app/serializers/application.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">DS</span> <span class="nx">from</span> <span class="s1">&#39;ember-data&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">keysMappingForSerialization</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;photographer&#39;</span><span class="o">:</span> <span class="s1">&#39;user&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;photo&#39;</span><span class="o">:</span> <span class="s1">&#39;picture&#39;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">keysMappingForNormalization</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;users&#39;</span><span class="o">:</span> <span class="s1">&#39;photographers&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;pictures&#39;</span><span class="o">:</span> <span class="s1">&#39;photos&#39;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">JSONAPISerializer</span><span class="p">.</span><span class="nx">extend</span><span class="p">({});</span>
</span><span class='line'>  <span class="nx">payloadKeyFromModelName</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">keysMappingForSerialization</span><span class="p">[</span><span class="nx">key</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_super</span><span class="p">(</span><span class="nx">keysMappingForSerialization</span><span class="p">[</span><span class="nx">key</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_super</span><span class="p">(...</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">modelNameFromPayloadKey</span><span class="p">(</span><span class="nx">modelName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">keysMappingForNormalization</span><span class="p">[</span><span class="nx">modelName</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_super</span><span class="p">(</span><span class="nx">keysMappingForNormalization</span><span class="p">[</span><span class="nx">modelName</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_super</span><span class="p">(...</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, the same pattern as before &ndash; for whitelisted types we want to remap them and apply the default logic for the rest of the types.</p>

<p>And to handle the relationships we can customize the serializers separately:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// app/serializers/photographer.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">ApplicationSerializer</span> <span class="nx">from</span> <span class="s1">&#39;./application&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">keysForRelationshipsMapping</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;photographer&#39;</span><span class="o">:</span> <span class="s1">&#39;user&#39;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">ApplicationSerializer</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">keyForRelationship</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">keysForRelationshipsMapping</span><span class="p">[</span><span class="nx">key</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_super</span><span class="p">(</span><span class="nx">keysForRelationshipsMapping</span><span class="p">[</span><span class="nx">key</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_super</span><span class="p">(...</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// app/serializers/photo.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">ApplicationSerializer</span> <span class="nx">from</span> <span class="s1">&#39;./application&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">keysForRelationshipsMapping</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;photo&#39;</span><span class="o">:</span> <span class="s1">&#39;picture&#39;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">ApplicationSerializer</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">keyForRelationship</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">keysForRelationshipsMapping</span><span class="p">[</span><span class="nx">key</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_super</span><span class="p">(</span><span class="nx">keysForRelationshipsMapping</span><span class="p">[</span><span class="nx">key</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_super</span><span class="p">(...</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s it! All our tests are green, and the models are going to work with the API!</p>

<h2>Wrapping Up</h2>

<p>Thanks to a <strong>solid design</strong> of <strong>Ember Data</strong>, it&rsquo;s quite simple to customize the <strong>data layer</strong> which in most cases requires merely overriding a couple of methods.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exotic Ruby: Module.class_exec, custom JSON And Liquid Drops In Action]]></title>
    <link href="https://karolgalanciak.com/blog/2018/03/27/exotic-ruby-module-dot-class-exec-and-liquid-drops-in-action/"/>
    <updated>2018-03-27T21:30:00+02:00</updated>
    <id>https://karolgalanciak.com/blog/2018/03/27/exotic-ruby-module-dot-class-exec-and-liquid-drops-in-action</id>
    <content type="html"><![CDATA[<p>Ruby has quite a lot of <strong>&ldquo;exotic&rdquo; features</strong> that are not used that often, but when you need to utilize some <strong>metaprogramming magic</strong>, you can easily take advantage of them. One of such features is <a href="http://ruby-doc.org/core-2.4.3/BasicObject.html#method-i-instance_exec">Object.instance_exec</a> which you might be familiar with if you&rsquo;ve ever built some more advanced DSL.</p>

<p>The great thing about <code>Object#instance_exec</code> is that it allows to execute code <strong>within the context of a given object</strong> but it also gives possibility to <strong>pass arguments from the current context</strong>. Thanks to that, we can build some nice DSLs and other features like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">role_filter</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">role</span><span class="p">)</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">role</span><span class="p">:</span> <span class="n">role</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="n">role</span> <span class="o">=</span> <span class="s2">&quot;admin&quot;</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">instance_exec</span><span class="p">(</span><span class="n">role</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">role_filter</span><span class="p">)</span> <span class="c1"># same as User.all.where(role: &quot;admin&quot;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>An interesting thing is that there is a <strong>class</strong> equivalent of <code>Object#instance_exec</code> &ndash; <a href="http://ruby-doc.org/core-2.4.3/Module.html#method-i-class_exec">Module.class_exec</a>. It would be easy to figure out some theoretical example how it can be used but what could be the real-world use case where this is the best approach to solve the problem?</p>

<!--more-->


<h2>Anatomy Of The Problem</h2>

<p>Imagine that you can have some custom JSON on every instance of some model and this JSON can have very different attributes on every instance depending on various conditions, like some category this model belongs to. To make it more complex, let&rsquo;s assume that the schema is customizable by the user so we can never really predict what kind of attributes are going to end up there.</p>

<p>Our feature to implement is to provide some wrapper class for this custom JSON so that we don&rsquo;t need to operate on hashes but we can have some objects where we can access these attributes by invoking methods on this object.</p>

<p>Using <a href="http://ruby-doc.org/stdlib-2.4.3/libdoc/ostruct/rdoc/OpenStruct.html">OpenStructs</a> sounds like the quickest solution to the problem but this is not going to be that easy in our case &ndash; we will need to expose this class to be used with <a href="https://github.com/Shopify/liquid">Liquid</a> templates, so that means we will need to inherit from <a href="https://github.com/Shopify/liquid/blob/4-0-stable/lib/liquid/drop.rb">Liquid::Drop</a>.</p>

<p>How about creating some <code>Wrapper</code> class that would take the <code>payload</code> as an argument and use <a href="http://ruby-doc.org/core-2.4.3/Object.html#method-i-define_singleton_method">Object#define_singleton_method</a> in the constructor to define custom methods based on the keys and values in that payload? Defining singleton methods sounds like the right solution to the problem as indeed each instance might need different methods. Let&rsquo;s try that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># app/drops/wrapper.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Wrapper</span> <span class="o">&lt;</span> <span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Drop</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@payload</span> <span class="o">=</span> <span class="n">payload</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">payload</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
</span><span class='line'>      <span class="n">define_singleton_method</span> <span class="n">key</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">value</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looks like it might be the answer to the problem:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">payload</span> <span class="o">=</span>  <span class="p">{</span> <span class="ss">ruby</span><span class="p">:</span> <span class="s2">&quot;is freakin&#39; awesome!&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="n">wrapper</span> <span class="o">=</span> <span class="no">Wrapper</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'><span class="n">wrapper</span><span class="o">.</span><span class="n">ruby</span>
</span><span class='line'><span class="c1"># =&gt; &quot;is freakin&#39; awesome!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is a huge problem with this solution though. These singleton methods are not going to be included in <code>Wrapper.public_instance_methods</code> array:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">Wrapper</span><span class="o">.</span><span class="n">public_instance_methods</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="ss">:ruby</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p>It might not be a big issue in some cases, but it won&rsquo;t work with <a href="https://github.com/Shopify/liquid">Liquid</a> <a href="https://github.com/Shopify/liquid/blob/4-0-stable/lib/liquid/drop.rb#L64-L76">Drop</a>, which explicitly checks for <code>public_instance_methods</code>.</p>

<p>Do we have any alternative that would be the most robust solution to this problem?</p>

<h2>The Solution</h2>

<p>The answer is yes! Although, the solution is going to be more tricky than the previous one.</p>

<p>First, we will need to take advantage of using the constructor of <code>Class</code> itself and create anonymous classes inheriting from <code>Liquid::Drop</code>. The next step would be defining the required methods based on <code>payload</code>. But how can we do that if <code>payload</code> is not available in the context of this class? We will need to make it available somehow and execute the code within the context of this class.</p>

<p>Fortunately, Ruby has got our back, and we can take advantage of <a href="http://ruby-doc.org/core-2.4.3/Module.html#method-i-class_exec">Module.class_exec</a> method which does exactly what we need here.</p>

<p>Here is a potential implementation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">payload</span> <span class="o">=</span>  <span class="p">{</span> <span class="ss">ruby</span><span class="p">:</span> <span class="s2">&quot;is freakin&#39; awesome!&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="n">magic_drop_class</span> <span class="o">=</span> <span class="no">Class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Drop</span><span class="p">)</span>
</span><span class='line'><span class="n">magic_drop_class</span><span class="o">.</span><span class="n">class_exec</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">payload</span><span class="o">|</span>
</span><span class='line'>  <span class="n">payload</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
</span><span class='line'>    <span class="n">define_method</span> <span class="n">key</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">value</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">example</span> <span class="o">=</span> <span class="n">magic_drop_class</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">example</span><span class="o">.</span><span class="n">ruby</span>
</span><span class='line'><span class="c1"># =&gt; &quot;is freakin&#39; awesome!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And what about <code>public_instance_methods</code>?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">magic_drop_class</span><span class="o">.</span><span class="n">public_instance_methods</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="ss">:ruby</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<p>That means we&rsquo;ve managed to achieve our goal!</p>

<h2>Wrapping Up</h2>

<p>Ruby is widely known for <strong>being powerful</strong> and allowing to easily do all kinds of things to objects, including <strong>modifying them on fly</strong> and <strong>executing the code within their context</strong>.  Thanks to that and uncommon methods like <a href="http://ruby-doc.org/core-2.4.3/Module.html#method-i-class_exec">Module.class_exec</a>, we can solve some <strong>tricky and rare problems</strong> with a very <strong>elegant solutions</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Quick Tips: Temporarily Disabling Touching with ActiveRecord.no_touching]]></title>
    <link href="https://karolgalanciak.com/blog/2018/02/25/rails-quick-tips-temporarily-disabling-touching-with-activerecord-dot-no-touching/"/>
    <updated>2018-02-25T20:00:00+01:00</updated>
    <id>https://karolgalanciak.com/blog/2018/02/25/rails-quick-tips-temporarily-disabling-touching-with-activerecord-dot-no-touching</id>
    <content type="html"><![CDATA[<p><strong>Touching</strong> <strong>ActiveRecord models</strong> is quite a common thing in most of the <strong>Rails applications</strong>, especially useful for cache invalidation. By default, it updates <code>updated_at</code> timestamp with the current time, Here&rsquo;s a typical example of using <a href="https://apidock.com/rails/ActiveRecord/Persistence/touch">touch</a> in a model:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/photo.rb</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Photo</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">touch</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Whenever a new photo is created, or the existing one is updated/destroyed, the <code>updated_at</code> attribute of the associated user will be updated with the current time. In the majority of the cases, this is the desired behavior (it&rsquo;s one of those rare ActiveRecord callbacks that is not that bad ;)). However, it might happen that you may not want <code>touch</code> to be executed for some reason. Is there any built-in solution that could solve that problem?</p>

<!--more-->


<h2>Anatomy Of The Problem</h2>

<p>Temporarily disabling <code>touch</code>ing can useful either for performance reasons (when updating a large number of records) or simply to prevent <code>after_touch</code> or <code>after_commit</code> from being executed multiple times. The latter might indicate that there is a deeper problem in the design as putting any important logic causing side-effects beyond the record&rsquo;s internal state in those <strong>ActiveRecord callbacks</strong> can easily go south (especially if you trigger email notifications), but the reality is that a lot of Rails applications use those callbacks in such cases.</p>

<h2>The Solution</h2>

<p>Fortunately, a heavy refactoring or a rewrite is not necessary. Instead, we can take advantage of <a href="http://api.rubyonrails.org/classes/ActiveRecord/NoTouching/ClassMethods.html">ActiveRecord.no_touching</a> which temporarily disables touching inside the block.</p>

<p>Imagine that you need to update all photos belonging to some user and <code>touch</code> this user only after all photos are updated. Here&rsquo;s how it could be handled:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">transaction</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">User</span><span class="o">.</span><span class="n">no_touching</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="n">photos</span><span class="o">.</span><span class="n">find_each</span> <span class="k">do</span> <span class="o">|</span><span class="n">photo</span><span class="o">|</span>
</span><span class='line'>      <span class="c1"># user won&#39;t be `touch`ed</span>
</span><span class='line'>      <span class="n">photo</span><span class="o">.</span><span class="n">update!</span><span class="p">(</span><span class="n">some_attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">user</span><span class="o">.</span><span class="n">touch</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If for some reason disabling touching is necessary for all models, you could just call it on <code>ActiveRecord::Base</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">transaction</span> <span class="k">do</span>
</span><span class='line'>  <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">no_touching</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="n">photos</span><span class="o">.</span><span class="n">find_each</span> <span class="k">do</span> <span class="o">|</span><span class="n">photo</span><span class="o">|</span>
</span><span class='line'>      <span class="c1"># no model will be `touch`ed</span>
</span><span class='line'>      <span class="n">photo</span><span class="o">.</span><span class="n">update!</span><span class="p">(</span><span class="n">some_attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">user</span><span class="o">.</span><span class="n">touch</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s it!</p>

<h2>Summary</h2>

<p><a href="http://api.rubyonrails.org/classes/ActiveRecord/NoTouching/ClassMethods.html"><code>ActiveRecord.no_touching</code></a> is certainly a quick solution to a potentially tricky issue. However, it is also a dirty hack that indicates a potential problem with the design of the application that should be addressed sooner than later.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PostgreSQL Quick Tips: Working With Dates Using EXTRACT function]]></title>
    <link href="https://karolgalanciak.com/blog/2018/01/30/postgresql-quick-tips-working-with-dates-using-extract-function/"/>
    <updated>2018-01-30T04:30:00+01:00</updated>
    <id>https://karolgalanciak.com/blog/2018/01/30/postgresql-quick-tips-working-with-dates-using-extract-function</id>
    <content type="html"><![CDATA[<p>Imagine that you are implementing an e-commerce platform and want to grab all orders from the <strong>current year</strong>. What would be the simplest way of doing it in Rails? Probably writing a query looking like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Order</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;created_at &gt;= ? AND created_at &lt; ?&quot;</span><span class="p">,</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span><span class="o">.</span><span class="n">beginning_of_year</span><span class="p">,</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span><span class="o">.</span><span class="n">beginning_of_year</span><span class="o">.</span><span class="n">next_year</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It gets the job done but requires unnatural filtering by a range for a use case generic enough that it should be handled just using some native functions. Is it possible?</p>

<p>Apparently, it is! We can use <a href="https://www.postgresql.org/docs/10/static/functions-datetime.html#FUNCTIONS-DATETIME-EXTRACT" target="_blank"><code>EXTRACT</code></a>  and <a href="https://www.postgresql.org/docs/10/static/functions-datetime.html#FUNCTIONS-DATETIME-CURRENT" target="_blank"><code>now()</code></a> functions &ndash; the former could be used for extracting the current <strong>year</strong> from a timestamp and the latter could be used for getting the current time.</p>

<p>With those two functions, the query could look like the following one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Order</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;EXTRACT(year FROM created_at) = EXTRACT(year FROM now())&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Much cleaner! And the great thing is that you can also create a functional index for <code>EXTRACT(year FROM created_at)</code> to avoid sequential scanning and get much better performance.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The aesthetics of Ruby - Kernel#itself method]]></title>
    <link href="https://karolgalanciak.com/blog/2017/12/26/the-aesthetics-of-ruby-kernel-number-itself-method/"/>
    <updated>2017-12-26T20:30:00+01:00</updated>
    <id>https://karolgalanciak.com/blog/2017/12/26/the-aesthetics-of-ruby-kernel-number-itself-method</id>
    <content type="html"><![CDATA[<p>Recently, I&rsquo;ve had quite a popular problem to solve: count the occurences of the given item in a collection. There are few ways to solve this problem &ndash; starting from using <code>Enumerable#inject</code> or <code>Enumerable#each_with_object</code> with an empty hash as an accumulator value and writing a code looking like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">collection</span><span class="o">.</span><span class="n">each_with_object</span><span class="p">({})</span> <span class="p">{</span> <span class="o">|</span><span class="n">item</span><span class="p">,</span> <span class="n">accum</span><span class="o">|</span> <span class="n">accum</span><span class="o">[</span><span class="n">item</span><span class="o">]</span> <span class="o">=</span> <span class="n">accum</span><span class="o">[</span><span class="n">item</span><span class="o">].</span><span class="n">to_i</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>through a bit smarter way and taking advantage of the default hash value:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">collection</span><span class="o">.</span><span class="n">each_with_object</span><span class="p">(</span><span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span> <span class="p">{</span> <span class="o">|</span><span class="n">item</span><span class="p">,</span> <span class="n">accum</span><span class="o">|</span> <span class="n">accum</span><span class="o">[</span><span class="n">item</span><span class="o">]</span> <span class="o">=</span> <span class="n">accum</span><span class="o">[</span><span class="n">item</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>All these solutions look quite nice; however, there is one that looks particularly beautiful.</p>

<!--more-->


<h2>The Aesthetics of Ruby</h2>

<p>An interesting way of solving this problem is by using <code>Enumerable#group_by</code> &ndash; we can simply group elements by themselves and count the occurences of each item. Here is one way to implement it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">collection</span><span class="o">.</span><span class="n">group_by</span> <span class="p">{</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="n">item</span> <span class="p">}</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span> <span class="o">[</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">.</span><span class="n">count</span><span class="o">]</span> <span class="p">}</span><span class="o">.</span><span class="n">to_h</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, it doesn&rsquo;t look that great, especially for Ruby standard. We could do better. Ruby 2.4 adapted a very useful core extension from ActiveSupport: <a href="https://ruby-doc.org/core-2.4.0/Hash.html#method-i-transform_values" target="_blank"><code>Hash#transform_values</code></a>. Thanks to this addition, we could rewrite that to the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">collection</span><span class="o">.</span><span class="n">group_by</span> <span class="p">{</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="n">item</span> <span class="p">}</span><span class="o">.</span><span class="n">transform_values</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:count</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looks much better, but <code>group_by { |item| item }</code> could still be improved. Is there anything in Ruby that could help us in such case?</p>

<p>It turns out there is! One of the additions in Ruby 2.2 was <a href="https://ruby-doc.org/core-2.2.0/Object.html#method-i-itself" target="_blank"><code>Kernel#itself</code></a>, which simply returns self. It might sound like an odd idea to introduce such method, but this is exactly something that we need:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">collection</span><span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:itself</span><span class="p">)</span><span class="o">.</span><span class="n">transform_values</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:count</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code looks just beautiful.</p>

<h2>Wrapping up</h2>

<p>Ruby code is known for being particularly pleasant to read and I&rsquo;m still happy that after several years I still feel immense joy when I discover interesting little things like <a href="https://ruby-doc.org/core-2.2.0/Object.html#method-i-itself" target="_blank"><code>Kernel#itself</code></a> which add up to the overall aesthetics of the language.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Traps on Rails - Overriding boolean methods in models]]></title>
    <link href="https://karolgalanciak.com/blog/2017/11/26/traps-on-rails-overriding-boolean-methods-in-models/"/>
    <updated>2017-11-26T16:00:00+01:00</updated>
    <id>https://karolgalanciak.com/blog/2017/11/26/traps-on-rails-overriding-boolean-methods-in-models</id>
    <content type="html"><![CDATA[<p>One very <strong>useful</strong> feature of <strong>ActiveRecord</strong> is automatically defining attribute readers and writers for all the columns for given tables. For the ones with <strong>boolean</strong> type, however, there is one more addition &ndash; defining an <strong>alias</strong> of the method with a question mark. Sometimes it might be useful to override this method and add some extra requirements for a given condition. However, this might not be such a good idea.</p>

<!--more-->


<h2>Anatomy of the problem</h2>

<p>Imagine that you are developing some application, where users can be activated and deactivated from an admin panel. However, the application is not free, and every user that wants to access the application needs to buy a subscription. In that case, to check if the user is, in fact, active, you could override <code>User#active?</code> method and add some extra requirements regarding the subscription:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># app/models/users.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">active?</span>
</span><span class='line'>    <span class="k">super</span> <span class="o">&amp;&amp;</span> <span class="n">valid_subscription?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">valid_subscription?</span>
</span><span class='line'>    <span class="c1"># somehow check if the subscription is valid</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We are taking advantage of the fact that ActiveRecord defines the aliases for boolean columns which are the original column names&#8217; ending with a question mark, so for <code>active</code> boolean column we can expect that <code>active?</code> method will be defined, and it will work the same as <code>active</code> method.</p>

<p>Ok, cool, we have our feature working and to check if a user is fully active, we call <code>User#active?</code> here and there. Our next requirement is exposing users in the API. Nothing too hard, we can add <a href="https://github.com/fotinakis/jsonapi-serializers"><code>jsonapi-serializers</code></a> gem and implement fully JSONAPI-compliant serializers. It turns out that we need to expose info if a user is active and not. Here is how our serializer could look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># app/serializers/user.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UserSerializer</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">JSONAPI</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">attribute</span> <span class="ss">:active</span>
</span><span class='line'>  <span class="c1"># other attributes</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It sounds like we are done here. But the truth is there is a nasty bug here! The serializer returns the value returned by <code>User#active</code>, not by <code>User#active?</code>!</p>

<h2>What exactly went wrong here?</h2>

<p>The primary thing that went wrongs here was being lazy about the naming and not introducing proper domain concepts. Somehow ActiveRecord made it even easier &ndash; there was already a method called <code>active?</code> defined based on the <code>active</code> column name, so the only thing that was necessary in that case to make our first feature work was overriding it and adding some extra condition because the idea of being &ldquo;active&rdquo; is kind of similar. But overriding boolean methods is never a good idea &ndash; it always implies that some concept is missing or is made implicit in the code.</p>

<h2>A solution to the problem</h2>

<p>A solution would be simply making this domain concept explicit. <code>User#active?</code> method doesn&rsquo;t check if the user is active is not, it rather checks if a user can access the application, so the better name for that method would be <code>User#can_access_application?</code></p>

<p>It is quite possible that we might later need to add some extra features that are related to this feature, like checking if the user is active but cannot access the app or just simply checking the <code>active</code> flag itself. Our final model could look like this in the end:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># app/models/users.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">can_access_application?</span>
</span><span class='line'>    <span class="n">active?</span> <span class="o">&amp;&amp;</span> <span class="n">valid_subscription?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cannot_access_application?</span>
</span><span class='line'>    <span class="o">!</span><span class="n">can_access_application?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># other methods</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We should also update the serializer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># app/serializers/user.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UserSerializer</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">JSONAPI</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">attribute</span> <span class="ss">:active</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">object</span><span class="o">.</span><span class="n">active</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">attribute</span> <span class="ss">:can_access_application</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">object</span><span class="o">.</span><span class="n">can_access_application?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">attribute</span> <span class="ss">:cannot_access_application</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">object</span><span class="o">.</span><span class="n">cannot_access_application?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>One could argue that this fix was not necessary and it was a developer&rsquo;s fault, and he or she should have checked the model if this method has not been overridden and adjust the serializer. That is somehow true, but if such code is deployed to production, it probably means that the reviewer of the code was not aware that there is a potential issue in the code and such things are really hard to spot &ndash; ActiveRecord adds those aliases for every boolean column so it might sound like a fair assumption that <code>User#active</code> and <code>User#active?</code> will return the same result.</p>

<p>However, the truth is that not only did we minimize the risk of having the name collisions by those changes but we gained some extra flexibility, and it was quite straight-forward to differentiate between <code>User#active?</code>and <code>User#can_access_application?</code>. In a previous implementation, it was simply not possible with the question-mark methods.</p>

<h2>Wrapping up</h2>

<p>Naming is one of <a href="https://martinfowler.com/bliki/TwoHardThings.html" target="_blank">two hard problems in computer science</a> and it&rsquo;s a good idea to always make all the domain concepts properly named and explicit, even if it means adding more code &ndash; just because something is not explicit, doesn&rsquo;t mean it doesn&rsquo;t exist. When it comes to <strong>ActiveRecord</strong> models, an extra caution is more than recommended &ndash; such models mix both persistence and domain concepts and it&rsquo;s quite easy to hurt yourself in such case. Not overriding boolean methods generated by ActiveRecord and properly naming things sounds like a good rule of thumb to follow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Case Against Exotic Usage of :before_validate Callbacks]]></title>
    <link href="https://karolgalanciak.com/blog/2017/10/29/the-case-against-exotic-usage-of-before-validate-callbacks/"/>
    <updated>2017-10-29T22:00:00+01:00</updated>
    <id>https://karolgalanciak.com/blog/2017/10/29/the-case-against-exotic-usage-of-before-validate-callbacks</id>
    <content type="html"><![CDATA[<p>It&rsquo;s nothing new that <strong>ActiveRecord callbacks</strong> are abused in many projects and used for the wrong reasons for many use cases where they can be <strong>easily avoided</strong> in favor of a much better alternative, like service objects. There is one callback though that is special and quite often used for pretty <strong>exotic reasons</strong> that have nothing to do with the process when it gets executed &ndash; it&rsquo;s the <code>before_validate</code> callback.</p>

<!--more-->


<h2>Data Formatting</h2>

<p>Data formatting is something pretty common in the majority of the applications, especially stripping strings. Imagine that you need to strip some <code>URL</code> so that potential spaces won&rsquo;t cause any issues. How would you approach that?</p>

<p>One way would be to use <code>before_validate</code> callback, especially if you have some format validations:</p>

<figure class='code'><figcaption><span>app/models/my_model.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyModel</span>
</span><span class='line'>  <span class="n">before_validate</span> <span class="ss">:strip_url</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">strip_url</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="n">url</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It gets the job done. However, how would you test it? You would need to call <code>valid?</code> method on the model to check that&hellip; <code>URL</code> is stripped? Sounds quite funny and is even better when you look at the potential spec:</p>

<figure class='code'><figcaption><span>spec/models/my_model_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;rails_helper&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">describe</span> <span class="no">MyModel</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="ss">:model</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;strips URL before validation&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">model</span> <span class="o">=</span> <span class="no">MyModel</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">url</span><span class="p">:</span> <span class="s2">&quot;  http://rubyonrails.org&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">model</span><span class="o">.</span><span class="n">valid?</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s2">&quot;http://rubyonrails.org&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s quite unlikely that this would be the result of <strong>TDD</strong> though ;). What&rsquo;s the alternative then?</p>

<p>How about just using attribute writer for that? So something like this:</p>

<figure class='code'><figcaption><span>app/models/my_model.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyModel</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">url</span><span class="o">=</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span><span class="p">(</span><span class="n">val</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here is a potential spec for this feature:</p>

<figure class='code'><figcaption><span>spec/models/my_model_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;rails_helper&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">describe</span> <span class="no">MyModel</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="ss">:model</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;strips URL&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">model</span> <span class="o">=</span> <span class="no">MyModel</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">url</span><span class="p">:</span> <span class="s2">&quot;  http://rubyonrails.org&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s2">&quot;http://rubyonrails.org&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Both the implementation and spec are much simpler and just more natural &ndash; data formatting has nothing to do with the validation, there is no need to use a callback related to validation to handle such use case.</p>

<h2>Populating attributes and relationships</h2>

<p>Another popular scenario is assigning attributes and relationships. Imagine you are creating a comment with a <code>content</code>, an author who will be <code>current_user</code> and also want to do some denormalization for performance reasons and directly assign <code>group</code> to this comment to which <code>current_user</code> belongs to. Here is how it is sometimes handled with <code>before_validate</code> callback:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Comment</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span>
</span><span class='line'>  <span class="ss">content</span><span class="p">:</span> <span class="n">content</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">author</span><span class="p">:</span> <span class="n">current_user</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/models/my_model.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyModel</span>
</span><span class='line'>  <span class="n">before_validate</span> <span class="ss">:assign_group</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">assign_group</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">group</span> <span class="o">=</span> <span class="n">author</span><span class="o">.</span><span class="n">group</span> <span class="k">if</span> <span class="n">author</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s quite similar to the previous use case with data formatting &ndash; to write a test for this feature, we would need again to call <code>valid?</code> which doesn&rsquo;t make much sense, validation has nothing to do with populating attributes or relationships. There is much simpler and much more explicit way to handle it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Comment</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span>
</span><span class='line'>  <span class="ss">content</span><span class="p">:</span> <span class="n">content</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">author</span><span class="p">:</span> <span class="n">current_user</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">group</span><span class="p">:</span> <span class="n">current_user</span><span class="o">.</span><span class="n">group</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is no magic here &ndash; just a simple assignment, which is easy to test and understand.</p>

<h2>Wrapping up</h2>

<p>Maybe there are some scenarios where <code>before_validate</code> callback is the best possible choice (I&rsquo;m yet to find them though), but I&rsquo;m pretty sure data formatting or populating attributes/associations are not valid cases to use it for.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Do. Or do not. There is no try - Object#try considered harmful]]></title>
    <link href="https://karolgalanciak.com/blog/2017/09/24/do-or-do-not-there-is-no-try-object-number-try-considered-harmful/"/>
    <updated>2017-09-24T22:00:00+02:00</updated>
    <id>https://karolgalanciak.com/blog/2017/09/24/do-or-do-not-there-is-no-try-object-number-try-considered-harmful</id>
    <content type="html"><![CDATA[<p><a href="https://apidock.com/rails/v4.2.7/Object/try" target="_blank"><code>Object#try</code></a> is quite a commonly used method in <strong>Rails applications</strong> to cover cases where there is a possibility of dealing with a <code>nil</code> value or to provide <strong>flexible interface</strong> for handling cases where some kind of object doesn&rsquo;t necessarily implement given method. Thanks to <code>try</code>, we may avoid getting <code>NoMethodError</code>. So it seems like it&rsquo;s perfect, right? No <code>NoMethodError</code> exception, no problem?</p>

<p>Well, not really. There are some <strong>severe problems</strong> with using <code>Object#try</code>, and usually, it&rsquo;s quite easy to implement a solution that would be much better.</p>

<!--more-->


<h2>Object#try &ndash; how does it work?</h2>

<p>The idea behind <code>Object#try</code> is simple: instead of raising <code>NoMethodError</code> exception when calling some method on <code>nil</code> or calling a method on non-<code>nil</code> object that is not implemented by this object, it just returns <code>nil</code>.</p>

<p>Imagine that you want to grab the email of the first user. To make sure it won&rsquo;t blow up when there are no users, you could write it the following way:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user.first.try(:email)</span></code></pre></td></tr></table></div></figure>


<p>What if you implemented some generic service where you can pass many types of objects and, e.g., after saving the object it attempts to send a notification if the object happens to implement a proper method for that? With <code>Object#try</code> it could be done like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">MyService</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">object</span><span class="p">)</span>
</span><span class='line'>    <span class="n">object</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'>    <span class="n">object</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:send_success_notification</span><span class="p">,</span> <span class="s2">&quot;saved from MyService&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, it is also possible to provide <code>arguments</code> of the method.</p>

<p>What if you need to do some chaining of the methods where you can get <code>nil</code> at each intermediate step? No problem, you can use <code>Object#try</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">payment</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:addresses</span><span class="p">)</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:first</span><span class="p">)</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:country</span><span class="p">)</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>What is the problem then?</h2>

<p>Apparently, <code>Object#try</code> is capable of handling multiple cases, so what is the problem with using it?</p>

<p>Well, there are many. The biggest issue with <code>Object#try</code> is that in many cases it <code>solves</code> problems that should never happen in the first place and that problem is <code>nil</code>. The another one is that the intention of using it is not clear. What does the following code try to say?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">payment</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:address</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Is it a legit case that some payment might not have a client and indeed it could be <code>nil</code>? Or is added &ldquo;just in case&rdquo; if <code>client</code> happens to be <code>nil</code> to not blow up with <code>NoMethodError</code> exception? Or even worse, does <code>client</code> happen to be a polymorphic relationship where some models implement <code>addresses</code> method and the others don&rsquo;t? Or maybe there is a problem with data integrity, and for a few payments the client was deleted for some reason, and it&rsquo;s no longer there?</p>

<p>Just by looking at this code it is impossible to tell what&rsquo;s the intention of <code>Object#try</code>, there are just too many possibilities.</p>

<p>Fortunately, there are plenty of alternative solutions that you can apply to get rid of <code>Object#try</code> and make your code clear and expressive &ndash; thanks to that, it will be much more maintainable, more readable and less prone to bugs as the intention will no longer be ambiguous.</p>

<h2>Alternative solutions</h2>

<p>Here are few &ldquo;patterns&rdquo; you could apply depending on the context where <code>Object#try</code> is used.</p>

<h3>Respecting Law of Demeter</h3>

<p><a href="https://en.wikipedia.org/wiki/Law_of_Demeter" target="_blank">Law of Demeter</a> is a handy rule (I wouldn&rsquo;t go that far to call it a &ldquo;law&rdquo; though) which helps avoid structural coupling. What it states is that hypothetical object A should be only interested in its own immediate surrounding and should not be aware of the internal structure of its collaborators or associations. In many cases, it means having only one &ldquo;dot&rdquo; in method calls. However, <strong>Law of Demeter</strong> is not really about the amount of &ldquo;dots&rdquo; (method calls), it&rsquo;s only about the coupling between objects, so chained operations and transformations are perfectly fine, e.g., the following example doesn&rsquo;t violate the law:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">input</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:capitalize</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>but the following one does:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">payment</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">address</span>
</span></code></pre></td></tr></table></div></figure>


<p>Respecting <strong>Law of Demeter</strong> usually results in a clean and maintainable code, so unless you have a good reason to violate it, you should stick to the law and avoid tight coupling.</p>

<p>Let&rsquo;s get back to the example with <code>payment</code>, <code>client</code> and <code>address</code>. How could we refactor the following code?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">payment</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:address</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first thing would be to reduce structural coupling and implement <code>Payment#client_address</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Payment</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">client_address</span>
</span><span class='line'>    <span class="n">client</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:address</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s much better now &ndash; instead of referring to the address via <code>payment.client.try(:address)</code> we can simply do <code>payment.client_address</code>, which is already an improvement as <code>Object#try</code> happens only in one place. Let&rsquo;s refactor it further.</p>

<p>We are left now with two options: either <code>client</code> being <code>nil</code> is a legit case or not. If it is, we can make the code look confident and explicitly return early, which clearly shows that having no <code>client</code> is a valid use case:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Payment</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">client_address</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">nil</span> <span class="k">if</span> <span class="n">client</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">client</span><span class="o">.</span><span class="n">address</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If it never happens to be <code>nil</code>, we can skip the guard statement:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Payment</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">client_address</span>
</span><span class='line'>    <span class="n">client</span><span class="o">.</span><span class="n">address</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Such delegations are pretty generic; maybe Rails has some nice solution to this problem? The answer is &ldquo;yes&rdquo;! <code>ActiveSupport</code> offers a very nice solution to the exact issue: <a href="http://api.rubyonrails.org/classes/Module.html#method-i-delegate" target="_blank"><code>ActiveSupport#delegate</code></a> macro. Thanks to that macro, you can define delegations and even handle <code>nil</code> in the exact way we did it.</p>

<p>The first example, where <code>nil</code> is a legit use case, could be rewritten the following way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Payment</span>
</span><span class='line'>  <span class="n">delegate</span> <span class="ss">:address</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="ss">:client</span><span class="p">,</span> <span class="ss">prefix</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="n">allow_nil</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>and the second one, if <code>nil</code> is never to be expected:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Payment</span>
</span><span class='line'>  <span class="n">delegate</span> <span class="ss">:address</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="ss">:client</span><span class="p">,</span> <span class="ss">prefix</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Much cleaner, less coupled and we&rsquo;ve managed to achieve the final result of not using <code>Object#try</code>, but just in a much more elegant way.</p>

<p>However, it is still possible that we might not expect payment to have an empty client (e.g. payment for the transaction that is not completed yet) in some cases, e.g., when displaying data for the payments with completed transactions, but somehow we are getting dreaded <code>NoMethodEror</code> exception. It doesn&rsquo;t necessarily mean that we need to add <code>allow_nil: true</code> option in <code>delegate</code> macro and for sure it doesn&rsquo;t mean that we should use <code>Object#try</code>. The solution here would be:</p>

<h3>Operating on the scoped data</h3>

<p>If we want to deal payments with completed transactions, which are guaranteed to have <code>client</code>, why not simply make sure that we are dealing with the right set of data? In Rails apps that would probably mean applying some ActiveRecord <code>scope</code> to <code>Payment</code>s collection, like <code>with_completed_transactions</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">Payment</span><span class="o">.</span><span class="n">with_completed_transactions</span><span class="o">.</span><span class="n">find_each</span> <span class="k">do</span> <span class="o">|</span><span class="n">payment</span><span class="o">|</span>
</span><span class='line'>  <span class="n">do_something_with_address</span><span class="p">(</span><span class="n">payment</span><span class="o">.</span><span class="n">client_address</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since we never plan to do anything with client&rsquo;s <code>address</code> for payments for not completed transactions, we don&rsquo;t need to explicitly handle <code>nil</code>s here.</p>

<p>Nevertheless, even if <code>client</code> were always required for creating a payment, it would still be possible that such code might result in <code>NoMethodError</code>. One example where that might happen would be a deleted by mistake associated <code>client</code> record. In that case, we would need to fix:</p>

<h3>Data integrity</h3>

<p>Ensuring data integrity, especially with RDBMS like PostgreSQL, is quite simple &ndash; we just need to remember about adding the right constraints when creating new tables. Keep in mind that this needs to be handled on a database level, validations in models are never enough as they can easily be bypassed. To avoid the issue where <code>client</code> turns out to be <code>nil</code>, despite presence validation, we should add <code>NOT NULL</code> and <code>FOREIGN KEY</code> constraints when creating <code>payments</code> table, which will prevent us from not having a client assigned at all and also deleting the client record if it&rsquo;s still associated with some payment:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">create_table</span> <span class="ss">:payments</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">references</span> <span class="ss">:client</span><span class="p">,</span> <span class="ss">index</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="n">foreign_key</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s it! By remembering about those constraints, you can avoid a lot of unexpected use cases with <code>nil</code>s.</p>

<h3>Ensuring types via explicit conversion</h3>

<p>I saw few times <code>Object#try</code> used in a quite exotic way which looked similar to this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">params</span><span class="o">[</span><span class="ss">:name</span><span class="o">].</span><span class="n">try</span><span class="p">(</span><span class="ss">:upcase</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, this code clearly shows that some string is expected to be found under <code>name</code> key in <code>params</code>, so why not just ensure it is a string by applying explicit conversion using <code>to_s</code> method?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">params</span><span class="o">[</span><span class="ss">:name</span><span class="o">].</span><span class="n">to_s</span><span class="o">.</span><span class="n">upcase</span>
</span></code></pre></td></tr></table></div></figure>


<p>Much cleaner that way!</p>

<p>However, those two codes are not equivalent. The former one returns a string if <code>params[:name]</code> is a string, but if it is <code>nil</code>, it will return <code>nil</code>. The latter always returns a string. It is not entirely clear if <code>nil</code> is expected in such case (which is the obvious problem with <code>Object#try</code>), so we are left with two options:</p>

<ul>
<li><code>nil</code> is the expected return value if <code>params[:name]</code> is <code>nil</code> &ndash; might not be the best idea as dealing with nils instead of strings might be quite inconvenient, however, in some cases, it might be necessary to have <code>nil</code>s. If that&rsquo;s the case, we can make it clear that we expect <code>params[:name]</code> to be <code>nil</code> by adding a guard statement:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">return</span> <span class="k">if</span> <span class="n">params</span><span class="o">[</span><span class="ss">:name</span><span class="o">].</span><span class="n">nil?</span>
</span><span class='line'>
</span><span class='line'><span class="n">params</span><span class="o">[</span><span class="ss">:name</span><span class="o">].</span><span class="n">to_s</span><span class="o">.</span><span class="n">upcase</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>a string is the expected return type &ndash; we don&rsquo;t need to bother with guard statements, and we can just keep the explicit conversion:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">params</span><span class="o">[</span><span class="ss">:name</span><span class="o">].</span><span class="n">to_s</span><span class="o">.</span><span class="n">upcase</span>
</span></code></pre></td></tr></table></div></figure>


<p>In more complex scenarios, it might be a better idea to use form objects and/or have a more robust types management, e.g. by using <a href="https://github.com/dry-rb/dry-types" target="_blank">dry-types</a>, but the idea would still be the same as for explicit conversions, it would just be better as far as the design goes.</p>

<h3>Using right methods</h3>

<p>Dealing with nested hashes is quite a common use case, especially when building APIs and dealing with user-provided payload. Imagine you are dealing with JSONAPI-compliant API and want to grab client&rsquo;s name when updating. The expected payload might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="ss">data</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">type</span><span class="p">:</span> <span class="s2">&quot;clients&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">attributes</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;some name&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, since we never know if the API consumer provided a proper payload or not, it would make sense to assume that the structure won&rsquo;t be right.</p>

<p>One terrible way to handle it would be using&hellip; guess what? Obviously <code>Object#try</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">params</span><span class="o">[</span><span class="ss">:data</span><span class="o">].</span><span class="n">try</span><span class="p">(</span><span class="ss">:[]</span><span class="p">,</span> <span class="ss">:attributes</span><span class="p">)</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:[]</span><span class="p">,</span> <span class="ss">:name</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s certainly hard to say that this code looks pleasant. And the funny thing is that it is really easy to rewrite cleanly.</p>

<p>One solution would be applying explicit conversions on each intermediate step:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">params</span><span class="o">[</span><span class="ss">:data</span><span class="o">].</span><span class="n">to_h</span><span class="o">[</span><span class="ss">:attributes</span><span class="o">].</span><span class="n">to_h</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s better, but not really expressive. Ideally, we would use some dedicated method. One of those potentially dedicated methods is <a href="https://ruby-doc.org/core-2.2.0/Hash.html#method-i-fetch" target="_blank"><code>Hash#fetch</code></a> which allows you to provide a value that should be returned if the given key is not present in the hash:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">params</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:data</span><span class="p">)</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:attributes</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It looks even better but would be nice to have something even more dedicated for digging through nested hashes. Fortunately, since Ruby 2.3.0, we can take advantage of <a href="http://ruby-doc.org/core-2.3.0_preview1/Hash.html#method-i-dig" target="_blank"><code>Hash#dig</code></a>, which was implemented for exactly this purpose &ndash; digging through nested hashes and not raising exceptions if some intermediate key turns out to not be there:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">params</span><span class="o">.</span><span class="n">dig</span><span class="p">(</span><span class="ss">:data</span><span class="p">,</span> <span class="ss">:attributes</span><span class="p">,</span> <span class="ss">:name</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Having Proper interfaces / Duck typing</h3>

<p>Let&rsquo;s get back to the example that was mentioned in the beginning with sending a potential notification:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">MyService</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">object</span><span class="p">)</span>
</span><span class='line'>    <span class="n">object</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'>    <span class="n">object</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:send_success_notification</span><span class="p">,</span> <span class="s2">&quot;saved from MyService&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are two possible solutions here:</p>

<ul>
<li><strong>Implementing two set of services</strong> &ndash; one that sends notifications and one that doesn&rsquo;t:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">MyServiceA</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">object</span><span class="p">)</span>
</span><span class='line'>    <span class="n">object</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyServiceB</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">object</span><span class="p">)</span>
</span><span class='line'>    <span class="n">object</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'>    <span class="n">object</span><span class="o">.</span><span class="n">send_success_notification</span><span class="p">(</span><span class="s2">&quot;saved from MyService&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thanks to this refactoring, the code is much cleaner, and we easily got rid of <code>Object#try</code>. However, now we need to know that for one type of objects we need to use <code>MyServiceA</code> and for another type <code>MyServiceB</code>. It might make sense, but might also be a problem. In such case the 2nd option would be better:</p>

<ul>
<li><strong>Duck typing</strong>. Simply add <code>send_success_notification</code> method to all objects that are passed to <code>MyService</code> and if it&rsquo;s supposed to do nothing, just leave the method body empty:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">MyService</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">object</span><span class="p">)</span>
</span><span class='line'>    <span class="n">object</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'>    <span class="n">object</span><span class="o">.</span><span class="n">send_success_notification</span><span class="p">(</span><span class="s2">&quot;saved from MyService&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The extra benefit of this option is that it helps to identify some common behaviors of the objects and to make them explicit. As you can see, in case of <code>Object#try</code> a lot of domain concepts might stay implicit and unclear. It doesn&rsquo;t mean they are not there; they are just not clearly identified. This is yet another important thing to keep in mind &ndash; <code>Object#try</code> also hurts your domain.</p>

<h3>Null Object Pattern</h3>

<p>Let&rsquo;s reuse the example above with sending notifications after persisting some models and do a little modification &ndash; we will make <code>mailer</code> an argument of the method and call <code>send_success_notification</code> on it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">MyService</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">object</span><span class="p">,</span> <span class="ss">mailer</span><span class="p">:</span> <span class="no">SomeMailer</span><span class="p">)</span>
</span><span class='line'>    <span class="n">object</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'>    <span class="n">mailer</span><span class="o">.</span><span class="n">send_success_notification</span><span class="p">(</span><span class="n">object</span><span class="p">,</span> <span class="s2">&quot;saved from MyService&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s going to work great if we always want to send a notification. What if we don&rsquo;t want to do it? One terrible way to handle it would be passing <code>nil</code> as a mailer and take advantage of <code>Object#try</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">MyService</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">object</span><span class="p">,</span> <span class="ss">mailer</span><span class="p">:</span> <span class="no">SomeMailer</span><span class="p">)</span>
</span><span class='line'>    <span class="n">object</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'>    <span class="n">mailer</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:send_success_notification</span><span class="p">,</span> <span class="n">object</span><span class="p">,</span> <span class="s2">&quot;saved from MyService&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="no">Service</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">object</span><span class="p">,</span> <span class="ss">mailer</span><span class="p">:</span> <span class="kp">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>But you&rsquo;ve probably already guessed this solution is a no-go. Fortunately, we can apply <a href="https://en.wikipedia.org/wiki/Null_Object_pattern" target="_blank">Null Object Pattern</a> and pass an instance of some <code>NullMailer</code> which implements <code>send_success_notification</code> method that simply does nothing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">NullMailer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">send_success_notification</span><span class="p">(</span><span class="o">*</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyService</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">object</span><span class="p">,</span> <span class="ss">mailer</span><span class="p">:</span> <span class="no">SomeMailer</span><span class="p">)</span>
</span><span class='line'>    <span class="n">object</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'>    <span class="n">mailer</span><span class="o">.</span><span class="n">send_success_notification</span><span class="p">(</span><span class="n">object</span><span class="p">,</span> <span class="s2">&quot;saved from MyService&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">MyService</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">object</span><span class="p">,</span> <span class="ss">mailer</span><span class="p">:</span> <span class="no">NullMailer</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s certainly better than using <code>Object#try</code>.</p>

<h2>What about <code>&amp;.</code> a.k.a. lonely/safe navigation operator?</h2>

<p><code>&amp;.</code>, lonely/safe navigation operator is a pretty new thing introduced in Ruby 2.3.0. It&rsquo;s quite similar to <code>Object#try</code>, but it&rsquo;s less ambiguous &ndash; if you call a method on the object different than <code>nil</code>, and this method is not implemented by that object, <code>NoMethodError</code> will still be raised which is not the case for <code>Object#try</code>. Check the following examples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:unknown_method</span><span class="p">)</span> <span class="c1"># assuming `user` is nil</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">first</span><span class="o">&amp;.</span><span class="n">unknown_method</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:unknown_method!</span><span class="p">)</span> <span class="c1"># assuming `user` is not nil</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">first</span><span class="o">&amp;.</span><span class="n">unknown_method</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="ss">NoMethodError</span><span class="p">:</span> <span class="n">undefined</span> <span class="nb">method</span> <span class="sb">`unknown_method&#39; for #&lt;User:0x007fb10c0fd498&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Does it mean safe navigation operator is fine and safe to use? Not really. It still comes with the same problems as <code>Object#try</code> does, it&rsquo;s merely one serious issue less.</p>

<p>Nevertheless, I think there is a case where the lonely operator is not that bad. Check the following example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">Comment</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span>
</span><span class='line'>  <span class="ss">content</span><span class="p">:</span> <span class="n">content</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">author</span><span class="p">:</span> <span class="n">current_user</span><span class="p">,</span>
</span><span class='line'>  <span class="n">group_id</span><span class="p">:</span> <span class="n">current_user</span><span class="o">&amp;.</span><span class="n">group_id</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>What we want to do is create a comment belonging to some <code>current_user</code> who might be an author and also assign a <code>group_id</code> from <code>current_user</code>, who might be nil.</p>

<p>The same code could be written as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">Comment</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="ss">content</span><span class="p">:</span> <span class="n">content</span><span class="p">,</span> <span class="ss">author</span><span class="p">:</span> <span class="n">current_user</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">group_id</span> <span class="o">=</span> <span class="n">current_user</span><span class="o">&amp;.</span><span class="n">group_id</span> <span class="k">if</span> <span class="n">current_user</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>or maybe as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">comment_params</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="ss">content</span><span class="p">:</span> <span class="n">content</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">author</span><span class="p">:</span> <span class="n">current_user</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">comment_params</span><span class="o">[</span><span class="ss">:group_id</span><span class="o">]</span> <span class="o">=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">group_id</span> <span class="k">if</span> <span class="n">current_user</span>
</span><span class='line'>
</span><span class='line'><span class="no">Comment</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="n">comment_params</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>But I think neither of those alternatives is more readable than the first example with <code>&amp;.</code> operator, so might be worth trading a bit of clarity for more readability.</p>

<h2>Wrapping Up</h2>

<p>I believe there is not a single valid use case for <code>Object#try</code> due to the <strong>ambiguity</strong> of its intentions, <strong>negative impact</strong> on the <strong>domain</strong> model and simply for the fact that there are <strong>many other ways</strong> to solve the problems that <code>Object#try</code> &ldquo;solves&rdquo; in a clumsy way &ndash; starting from respecting Law of Demeter and delegations, through operating on properly scoped data, applying right database constraints, ensuring types using explicit conversions, using proper methods, having right interfaces, taking advantage of duck typing, ending with Null Object Pattern  or even using the safe navigation operator (<code>&amp;.</code>) which is much safer to use and might be applied in limited cases.</p>

<p><img src="https://karolgalanciak.com/images/object_try/yoda.jpeg" title="yoda" alt="yoda"></p>

<p class="small-p center">
  Source: https://www.pbnsg.org/weight-management/2015/7/27/do-or-do-not-there-is-no-try-yoda
</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 years of professional Ruby and Rails development - My Reflections]]></title>
    <link href="https://karolgalanciak.com/blog/2017/08/27/5-years-of-professional-ruby-and-rails-development-my-reflections/"/>
    <updated>2017-08-27T23:00:00+02:00</updated>
    <id>https://karolgalanciak.com/blog/2017/08/27/5-years-of-professional-ruby-and-rails-development-my-reflections</id>
    <content type="html"><![CDATA[<p>As hard as it is for me to believe, I already have over <strong>5 years</strong> of professional experience in <strong>Ruby and Rails</strong>. Throughout all these years my attitude towards Rails has been fluctuating between going from <strong>blind love</strong> to <strong>harsh critic</strong> (<strong>ActiveRecord</strong>, I&rsquo;m looking at you) ending with a bit more balanced but certainly a positive approach. Such time is long enough to have a meaningful opinion about the <strong>overall experience</strong> using any framework, so here are few points about Rails that I would particularly like to focus on in my reflections.</p>

<!--more-->


<h2>ActiveRecord and model layer</h2>

<p>ActiveRecord is arguably the biggest and the most important part of Rails. Not only is it quite complex itself, but following the &ldquo;skinny controllers, fat models&rdquo; mantra often leads to creating huge models which extend <code>ActiveRecord::Base</code> making a huge part of virtually the majority of the applications. So what has been my experience with this layer for the last 5 years?</p>

<p>When I was starting with Rails I naturally followed the default &ldquo;Rails Way&rdquo; which meant moving logic from the controllers to models, handling entire business logic in models&#8217; classes and adding callbacks here and there for the logic around persistence. And it was awesome initially! I was able to progress with all the features really fast, even in spite of lacking meaningful Rails experience.</p>

<p>However, I started quite soon to experience some serious issues: I had to handle big part of the logic with a lot of conditionals depending on the context, some methods were handling logic for both creation of the records and the updates, but only with a slight difference, which added even more conditionals to that. The validation logic started to become complex which required conditional validations as well. And one day, when running some data migrations I used <code>update_attributes</code> instead of <code>update_columns</code> and tons of email notifications were sent to the users due to some callbacks that were responsible for sending notifications&hellip;</p>

<p>At that point I pretty much lost control over the application logic as I was not able to tell any longer what something so fundamental as calling <code>update</code> or <code>save</code> can lead to. That was the time when my default policy regarding models started to be &ldquo;no callbacks ever, no conditional validations ever, ideally no logic at all.&rdquo; This approach worked for a while, but eventually it lead to some other issues like distributing similar logic between many objects (service objects and form object mostly), duplication of the logic and feature envy code smells, even though it was quite clear that the logic belonged to the models. Aparently, the anemic domain model approach didn&rsquo;t work as well as I had thought it would. Another case was that I was doing whatever it takes to avoid callbacks and lost quite a lot of time with fighting some gems that were coupled to the models via callbacks. That could have been a right thing to do from the &ldquo;purity&rdquo; perspective, but it wasn&rsquo;t the smartest decisision business wise &ndash; the purpose of the code is to serve the business and provide the required functionality, not to be possibly the purest solution. Maintainability is one thing, but it&rsquo;s easy to reach a point of diminishing return in most applications where more purity and better design doesn&rsquo;t necessarily lead to a greater business value, but takes definitely a lot of time.</p>

<p>All those events lead to more balanced attitude that I have now towards ActiveRecord and model layer. Callbacks, complex conditional validations and other typical Rails Way techniques are far from being my preferred way of handling business logic and in general I consider those approaches harmful in the long-term perspective, but I clearly see how they can be beneficial in short-term perspective when developing MVP and the rapid speed of development is required and maintainability is secondary or when something can be cleverly handled even in more complex applications with minimum effort like e.g. in case of <a href="https://github.com/carrierwaveuploader/carrierwave" target="_blank">Carrierwave</a> callbacks, using <code>touch</code> and <code>dependent</code> associations&#8217; options etc.</p>

<p>I also tend to put model-related logic in, well, models. Does it lead to fat models? Sometimes yes, In bigger applications than can easily lead to the models with 200-300 lines of code. But if the logic is cohesive and not really context-dependent I don&rsquo;t find it a big issue &ndash; the clarity is most often preserved and the maintainability is not negatively impacted. The important thing is to put there only a generic domain model logic, ideally not related to the persistence itself.</p>

<p>Following that approach has been working pretty great for me and I don&rsquo;t really complain about ActiveRecord anymore. Maybe the architecture is a bit limiting and something like data mapper pattern would be more flexible. Or some methods like <code>update_attribute</code> / <code>update_columns</code> can be really confusing if used without a right reason or even more exotic features like <code>ActiveRecord.suppress</code> can lead to the code that is hard to reason about. Nervertheless, it is still possible to mantain models in a good shape using ActiveRecord and just the fact that something can do a lot of harm doesn&rsquo;t mean that it should not be there at all &ndash; it&rsquo;s a developer&rsquo;s responsibility to choose the tools and design for solving the problem wisely and in the maintainable way in the long run.</p>

<h2>Lack of Higher Level Architecture</h2>

<p>Rails is sometimes criticized for not providing higher-level architecture and there are a lot of solutions that are supposed to fill that hole (e.g. <a href="https://github.com/trailblazer/trailblazer" target="_blank">Trailblazer</a> which is a mini-framework providing form objects, operation classess and more). However, I don&rsquo;t necessarily think it&rsquo;s a bad decision.</p>

<p>Models and controllers are generic enough that to some extent they can be pretty much similar in most of the applications. What about some higher level layers?</p>

<p>There are plenty of gems implementing form objects, service objects and other layers and most often they are significantly different from each other. And just adding service objects or form objects might not be the best design decision ever. Maybe going full CQRS / Event Sourcing with write models and read models is better? And how would you know what should be the structure of service objects or operations or form objects or any other abstraction?</p>

<p>It would probably be extremely difficult to find a solution that would satisfy most of the Rails developers and any attempt to add those layers to Rails could end up with conflicts about the implementaiton details and/or interfaces, which wouldn&rsquo;t be really productive.</p>

<p>The current approch of focusing on existing layers is in my opinion the right one and any reasonably experienced developer should be able to figure out what kind of architectural approach would be the best fit for the given application.</p>

<h2>ActiveSupport</h2>

<p>Another layer that is arguably widely considered to be problematic is ActiveSupport, especially the monkeypatching part. I&rsquo;m not a fan of monkeypatching myself and I almost never do it, however, the core extentions provided by ActiveSupport are extremely useful and very convenient and I don&rsquo;t really remember having any major problems with them. I can agree that it might not be the most &ldquo;elegant&rdquo; solution from the purity perspective, but it gets the job done and does it well without causing problems in the long run for the application &ndash; this is ultimately the most important factor when it comes to a software engineering. I think the overall critique of ActiveSupport is a bit far-fetched and the practical negative implications of what ActiveSupport provides are negligible and there are quite a lot of positive outcomes which cannot be overlooked that easily.</p>

<h2>What About Other Frameworks?</h2>

<p>I&rsquo;ve had a chance to try some different frameworks than Rails throughout all these years &ndash; including Django (Python), Play (Java), Phoenix (Elixir), Meteor (JavaScript) or other Ruby frameworks &ndash; Sinatra and Hanami. They were quite fun to work with, but the productivity and the enjoyment of development couldn&rsquo;t possibly match the Rails experience. Obviously, the maturity of the ecosystem plays a huge role here and that&rsquo;s why some of the newer frameworks have a much harder time competing with Rails, nevertheless, even Rails out-of-box without any extra gems offers a great productivity which is significantly higher comparing to the other frameworks.</p>

<h2>Future</h2>

<p>Currently I don&rsquo;t see any framework that could possibly replace Rails in the near future, at least not for the generic webdevelopment. Phoenix, which somehow resembles Rails, might be the closest one, but in my opinion Elixir language and functional paradigm are much harder to learn than Ruby and Object Oriented Programming. Also, due to the much bigger community, maturity and overall ease of development in Rails, it might take quite a long time until Phoenix catches up, despite having some clear advantages over Ruby and Rails like speed and concurrency (thanks to Erlang virtual machine).</p>

<h2>Wrapping Up</h2>

<p>Ruby on Rails definitely made my professional life amazing and it&rsquo;s been a <strong>great joy</strong> to develop all the applications I&rsquo;ve had a chance to work on, despite few times when I had a bit negative attitude towards it. Even though there are some imperfections, Rails is still a <strong>number one choice</strong> for me for the majority of the cases and I don&rsquo;t see it moving anyway in the near future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ember Tips: Testing Outgoing HTTP Requests]]></title>
    <link href="https://karolgalanciak.com/blog/2017/06/25/ember-tips-testing-outgoing-http-requests/"/>
    <updated>2017-06-25T22:00:00+02:00</updated>
    <id>https://karolgalanciak.com/blog/2017/06/25/ember-tips-testing-outgoing-http-requests</id>
    <content type="html"><![CDATA[<p><strong>Ember.js</strong> is a web frontend framework and it&rsquo;s no surprise that majority of the applications deal with a lot of <strong>HTTP requests</strong>. But such fact has a lot of implications on the process of development of the Ember apps, especially when it comes to <strong>testing</strong>. For basic <code>GET</code> requests which don&rsquo;t include any query params or don&rsquo;t deal with pagination it&rsquo;s quite straight-forward &ndash; for those we just want to fetch some data, so we can check if proper objects are present as a side-effect of these requests. What about <code>POST</code>, <code>PATCH</code> or <code>DELETE</code> requests, where we can&rsquo;t easily test the side effects?</p>

<p>Fortunately, thanks to the awesome tools such as <a href="https://github.com/pretenderjs/pretender" target="_blank">pretender</a> and <a href="https://github.com/samselikoff/ember-cli-mirage" target="_blank">ember-cli-mirage</a>, it&rsquo;s not a big problem.</p>

<!--more-->


<h2>Scenario #1: Testing if the request body sent in the outgoing request is right</h2>

<p>Imagine that you are writing a classic sign-up for users. It would be quite useful to ensure that the right params are indeed sent to the <code>/api/users</code> endpoint (if that&rsquo;s the case).</p>

<p>For dealing with HTTP requests and/or implementing a backend mock, <a href="https://github.com/samselikoff/ember-cli-mirage" target="_blank">ember-cli-mirage</a> addon is a great choice. The setup is beyond the scope of this article, but if you happen to not be familiar with <code>ember-cli-mirage</code>, I highly recommend reading the <a href="http://www.ember-cli-mirage.com" target="_blank">docs</a> which are very clear about the setup and its features.</p>

<p>Let&rsquo;s assume that we have a proper route generated for the signup, let it be a <code>signup</code> route, a corresponding <code>signup</code> controller already handling a logic for the registration in one of its actions and that we have a <code>User</code> model with <code>email</code> and <code>password</code> attributes. Our scenario will be pretty simple: we want to make sure that after filling in <code>email</code> and <code>password</code> fields and clicking the <code>submit</code> button the request will be performed to <code>/api/users</code> with the right params. Here&rsquo;s our test for the signup feature:</p>

<figure class='code'><figcaption><span>my-awesome-app/tests/acceptance/sign-up.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/* global server */</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">test</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;qunit&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">moduleForAcceptance</span> <span class="nx">from</span> <span class="s1">&#39;book-me/tests/helpers/module-for-acceptance&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">moduleForAcceptance</span><span class="p">(</span><span class="s1">&#39;Acceptance | sign up&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;user can successfully sign up&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">assert</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">server</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/api/users&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">schema</span><span class="p">)</span>  <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">attributes</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">normalizedRequestAttrs</span><span class="p">();</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">expectedAttributes</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">email</span><span class="o">:</span> <span class="s1">&#39;example@email.com&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">password</span><span class="o">:</span> <span class="s1">&#39;secretpassword&#39;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">attributes</span><span class="p">,</span> <span class="nx">expectedAttributes</span><span class="p">,</span> <span class="s2">&quot;attributes don&#39;t match the expected ones&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">schema</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">attributes</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">visit</span><span class="p">(</span><span class="s1">&#39;/signup&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">andThen</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fillIn</span><span class="p">(</span><span class="s1">&#39;[data-test=signup-email]&#39;</span><span class="p">,</span> <span class="s2">&quot;example@email.com&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">fillIn</span><span class="p">(</span><span class="s1">&#39;[data-test=signup-password]&#39;</span><span class="p">,</span> <span class="s1">&#39;secretPassword&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">click</span><span class="p">(</span><span class="s1">&#39;[data-test=submit-signup]&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this acceptance test we visit the <code>signup</code> page, provide the email and password combo and we click on the submit button. There is only one simple assertion here: comparing the expected attributes against the normalized attributes from the requests to <code>/api/users</code> endpoint &ndash; we use normalized attributes to avoid dealing with JSONAPI format. To achieve that we provide a custom action handler which is very close to the default implementation for <code>POST</code> actions from <code>ember-cli-mirage</code>. The only extra step here is comparing the attributes.</p>

<p>What if we want to just make sure that the request was performed to the given endpoint, but we don&rsquo;t care about the request body?</p>

<h2>Scenario #2 Testing if the request was performed to the given endpoint</h2>

<p>For this scenario imagine that we want to have a feature of deleting some tasks from the to-do list. The simplest way to make sure that the task will be removed would be checking if the <code>DELETE</code> request was performed to <code>/api/tasks/:id</code> endpoint. Again, let&rsquo;s assume that we already have a right implementation for this feature (too bad we didn&rsquo;t practice strict TDD to develop it properly).</p>

<p>For this use case we will do something a bit different than the last time. First, let&rsquo;s add the right config for the <code>ember-cli-mirage</code> to handle CRUD actions for <code>tasks</code> using <code>resource</code> helper:</p>

<figure class='code'><figcaption><span>my-awesome-app/mirage/config.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">namespace</span> <span class="o">=</span> <span class="s1">&#39;api&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">resource</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s how our test could look like:</p>

<figure class='code'><figcaption><span>my-awesome-app/tests/acceptance/delete-task.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/* global server */</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">test</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;qunit&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">moduleForAcceptance</span> <span class="nx">from</span> <span class="s1">&#39;book-me/tests/helpers/module-for-acceptance&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">moduleForAcceptance</span><span class="p">(</span><span class="s1">&#39;Acceptance | delete task&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;user can delete tasks&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">assert</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">task</span> <span class="o">=</span> <span class="nx">server</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="s1">&#39;task&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">visit</span><span class="p">(</span><span class="s1">&#39;/tasks&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">click</span><span class="p">(</span><span class="s1">&#39;[data-test=delete-task]&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">andThen</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">taskUrl</span> <span class="o">=</span> <span class="err">`</span><span class="o">/</span><span class="nx">api</span><span class="o">/</span><span class="nx">tasks</span><span class="o">/</span><span class="nx">$</span><span class="p">{</span><span class="nx">task</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="err">`</span><span class="p">;</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">deleteTaskRequest</span> <span class="o">=</span> <span class="nx">server</span><span class="p">.</span><span class="nx">pretender</span><span class="p">.</span><span class="nx">handledRequests</span><span class="p">.</span><span class="nx">find</span><span class="p">((</span><span class="nx">request</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">request</span><span class="p">.</span><span class="nx">url</span> <span class="o">===</span> <span class="nx">taskUrl</span> <span class="o">&amp;&amp;</span> <span class="nx">request</span><span class="p">.</span><span class="nx">method</span> <span class="o">===</span> <span class="s1">&#39;DELETE&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">assert</span><span class="p">.</span><span class="nx">ok</span><span class="p">(</span><span class="nx">deleteTaskRequest</span><span class="p">,</span> <span class="s1">&#39;delete task request should be performed&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, our test has a very simple structure: we visit the <code>tasks</code> route where all the tasks are displayed and delete the one we created in the test&rsquo;s setup. To make sure that the request was performed to the right endpoint we take advantage of the fact that <code>ember-cli-mirage</code> uses <code>pretender</code> under the hood which keeps track of all handled requests in <code>handledRequests</code> property. Thanks to this feature, we can identify our request based on the <strong>URL</strong> and the <strong>request method</strong>.</p>

<h2>Wrapping Up</h2>

<p>Testing <strong>outgoing requests</strong> in Ember might not be the most obvious thing to do. Fortunately, thanks to <a href="https://github.com/pretenderjs/pretender" target="_blank">pretender</a> and <a href="https://github.com/samselikoff/ember-cli-mirage" target="_blank">ember-cli-mirage</a>, we can easily verify both the <strong>URLs</strong> of the endpoints where the requests were performed to and the <strong>request body</strong> that was sent with the request.</p>

<p>P.S. I&rsquo;ve just started <strong>writing a book</strong> about <strong>test-driving Ember</strong> applications. If you found this article useful, you are going to love it :). <strong>Subscribe</strong> to my newsletter to get updates and promotion code once it&rsquo;s released.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Memoization: ||= vs. defined? syntax]]></title>
    <link href="https://karolgalanciak.com/blog/2017/05/28/ruby-memoization-%7C%7C-equals-vs-defined-syntax/"/>
    <updated>2017-05-28T22:00:00+02:00</updated>
    <id>https://karolgalanciak.com/blog/2017/05/28/ruby-memoization-||-equals-vs-defined-syntax</id>
    <content type="html"><![CDATA[<p>In the majority of the <strong>Rails applications</strong> or even <strong>Ruby gems</strong> you can find a lot of use cases where you need to <strong>memoize</strong> a result of some computation for performance benefits and to not compute it again if this result has already been computed. Seems like doing the assignment to some instance variable with <code>||=</code> operator is the most commonly used solution for this purpose, e.g. <code>@result ||= do_some_heavy_computation</code>. However, there are some cases where it might not produce the expected outome and you should actually use <code>defined?</code> operator instead.</p>

<!--more-->


<h2>What Is <code>||=</code> operator?</h2>

<p>Let&rsquo;s get back to the example from the introduction: <code>@result ||= do_some_heavy_computation</code>. What is this <code>||=</code> operator and how does it work? <del>It&rsquo;s nothing more than a <strong>syntactic shortcut</strong> and it&rsquo;s an equivalent of @result || @result = do_some_heavy_computation</del> Edit: It&rsquo;s very close to <code>@result || @result = do_some_heavy_computation</code>, but <a href="http://www.rubyinside.com/what-rubys-double-pipe-or-equals-really-does-5488.html" target="_blank">not exactly the same</a> which translates to: &ldquo;return the value of <code>@result</code> if the value is truthy or assign the result of <code>do_some_heavy_computation</code> to <code>@result</code>&rdquo;. Clearly, the shortcut version looks more appealing. Keep in mind though that it&rsquo;s not really about already assigning some value to the instance variable, but rather if the value of it is truthy or not. How do we check then if the instance variable has already been set knowing that referring to undefined instance variable will simply result in <code>nil</code> without any exceptions?</p>

<h2>What Is <code>defined?</code> operator?</h2>

<p>We can do that by using <code>defined?</code> opeator, which returns <code>nil</code> if its argument is not defined or, if it is defined, the description of that argument. Thanks to that behaviour, we can easily check if some instance variable has already been set or not:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">defined?</span><span class="p">(</span><span class="vi">@result</span><span class="p">)</span> <span class="sr">//</span> <span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@result</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'><span class="n">defined?</span><span class="p">(</span><span class="vi">@result</span><span class="p">)</span> <span class="sr">//</span> <span class="o">=&gt;</span> <span class="s2">&quot;instance-variable&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Memoization gotcha</h2>

<p>Ok, we now understand the difference between <code>||=</code> and <code>defined?</code> operators, why should we bother in the context of memoization?</p>

<p>Imagine that you have a following method in some object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">heavy_computation_result</span>
</span><span class='line'>  <span class="vi">@result</span> <span class="o">||=</span> <span class="n">do_some_heavy_computation</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>and you are calling <code>heavy_computation_result</code> method multiple times to reuse the result of the computation. Certainly, this computation is heavy (as the name suggests) and ideally it should be computed only once for the performance reasons. What if this computation returns <code>nil</code> or <code>false</code>?</p>

<p><del>As @result ||= do_some_heavy_computation is nothing more than a shortcut of @result || @result = do_some_heavy_computation expression</del> Edit: As <code>@result ||= do_some_heavy_computation</code> works in a <a href="http://www.rubyinside.com/what-rubys-double-pipe-or-equals-really-does-5488.html" target="_blank">pretty similar way</a> to  <code>@result || @result = do_some_heavy_computation</code> expression, the left side will be falsey in such case and the computation will be performed every time you call <code>heavy_computation_result</code> method making this syntax useless here!</p>

<p>For the <strong>proper memoization</strong>, this method should be rewritten using <code>defined?</code> operator:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">heavy_computation_result</span>
</span><span class='line'>  <span class="k">return</span> <span class="vi">@result</span> <span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="vi">@result</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@result</span> <span class="o">=</span> <span class="n">do_some_heavy_computation</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Wrapping Up</h2>

<p>Even though <code>||=</code> operator is commonly used for memoization, it isn&rsquo;t necessarily the best solution to this problem. It is certainly quite convenient to use, nevertheless, when there is a possiblity of having <strong>falsey values</strong> such as <code>false</code> and <code>nil</code>, it is much safer to use <code>defined?</code> operator instead.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ember Tips: Managing Timeouts And Delays]]></title>
    <link href="https://karolgalanciak.com/blog/2017/04/30/ember-quick-tips-managing-timeouts-and-delays/"/>
    <updated>2017-04-30T22:00:00+02:00</updated>
    <id>https://karolgalanciak.com/blog/2017/04/30/ember-quick-tips-managing-timeouts-and-delays</id>
    <content type="html"><![CDATA[<p><strong>Timeouts</strong> and <strong>delays</strong> are quite extensively used in many applications when deferring execution of some action via <code>Ember.run.later</code> or debouncing via <code>Ember.run.debounce</code>. Having small amounts of tests executing such methods might not be a problem initially, but obviously, as the application grows, this can easily lead to <strong>slow test suite</strong> which takes minutes to finish due to the waiting for all the timeouts and delays in many places. Let&rsquo;s try to find the best solution to solve this problem.</p>

<!--more-->


<h2>Anatomy of The Problem</h2>

<p>Imagine you are implementing a todo-list and want to add a <strong>destroy item feature</strong>. The obvious solution would be adding a button which would trigger some <code>destroy</code> action once a user clicks it. But the problem with such solution is that it doesn&rsquo;t offer the best <strong>UX</strong> as a user could easily destroy items <strong>by accident</strong>. A nicer way for such use cases is making a user hold the button for a certain period of time and only after this <strong>delay</strong> would the action be invoked, otherwise it won&rsquo;t be executed.</p>

<p>A great news is that there is already an addon solving such problem: <a href="https://www.npmjs.com/package/ember-hold-button" target="_blank">ember-hold-button</a>. Let&rsquo;s create a very simple component handling the logic of displaying the item and deleting it after holding a button for 3 seconds using <code>ember-hold-button</code>:</p>

<figure class='code'><figcaption><span>app/components/display-todo-item.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">&#39;ember&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">get</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Component</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">actions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">destroy</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kr">const</span> <span class="nx">item</span> <span class="o">=</span> <span class="nx">get</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;item&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">item</span><span class="p">.</span><span class="nx">destroyRecord</span><span class="p">();</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/templates/components/display-todo-item.hbs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{{item.name}}
</span><span class='line'>{{#hold-button type=&quot;rectangle&quot; action=&quot;destroy&quot; delay=3000 data-test=&quot;destroy-item-btn&quot;}}
</span><span class='line'>  Destroy
</span><span class='line'>{{/hold-button}}
</span></code></pre></td></tr></table></div></figure>


<p>Ok, cool, so the feature is done. What about integrations tests verifying that this feature works? Currently, it would take at least 3 seconds due to the waiting time + the runtime of the test itself, which is definitely too slow.</p>

<h2>Solving The Problem</h2>

<p>One way to fix this problem would be moving <code>delay</code> to computed property which would be configurable and by default make it equal to 3 seconds. The component would look like this in such case:</p>

<figure class='code'><figcaption><span>app/components/display-todo-item.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">&#39;ember&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">get</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Component</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">destroyActionDelay</span><span class="o">:</span> <span class="mi">3000</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">actions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">destroy</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kr">const</span> <span class="nx">item</span> <span class="o">=</span> <span class="nx">get</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;item&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">item</span><span class="p">.</span><span class="nx">destroyRecord</span><span class="p">();</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/templates/components/display-todo-item.hbs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{{item.name}}
</span><span class='line'>{{#hold-button type=&quot;rectangle&quot; action=&quot;destroy&quot; delay=destroyActionDelay data-test=&quot;destroy-item-btn&quot;}}
</span><span class='line'>  Destroy
</span><span class='line'>{{/hold-button}}
</span></code></pre></td></tr></table></div></figure>


<p>To make integration tests fast, we would simply override the default value of <code>destroyActionDelay</code> and render the component in the test the following way:</p>

<figure class='code'><figcaption><span>tests/integration/components/display-todo-item-test.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// the rest of the tests</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">hbs</span><span class="err">`</span><span class="p">{{</span><span class="nx">display</span><span class="o">-</span><span class="nx">todo</span><span class="o">-</span><span class="nx">item</span> <span class="nx">item</span><span class="o">=</span><span class="nx">item</span> <span class="nx">destroyActionDelay</span><span class="o">=</span><span class="mi">0</span><span class="p">}}</span><span class="err">`</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// the rest of the tests</span>
</span></code></pre></td></tr></table></div></figure>


<p>This surely solves the problem for <strong>integration tests</strong>, but what about the <strong>acceptance ones</strong>? It would still take at least 3 seconds of waiting for this delay.</p>

<p>For this purpose we could add a special function which would return the value for the delay <strong>based on the environment</strong>. For <strong>non-test</strong> we may want to return a provided value and for test environment some other value, which by default would be equal to 0 to make the tests fast. Let&rsquo;s add such a utility function and call it <code>timeoutForEnv</code>:</p>

<figure class='code'><figcaption><span>my-app/app/utils/timeout-for-env.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">config</span> <span class="nx">from</span> <span class="s1">&#39;my-app/config/environment&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">timeoutForEnv</span><span class="p">(</span><span class="nx">timeout</span><span class="p">,</span> <span class="nx">timeoutForTestEnv</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">environment</span> <span class="o">===</span> <span class="s1">&#39;test&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">timeoutForTestEnv</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">timeout</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And update the component:</p>

<figure class='code'><figcaption><span>app/components/display-todo-item.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">&#39;ember&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">timeoutForEnv</span> <span class="nx">from</span> <span class="s1">&#39;my-app/utils/timeout-for-env&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">get</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Component</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">destroyActionDelay</span><span class="o">:</span> <span class="nx">timeoutForEnv</span><span class="p">(</span><span class="mi">3000</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">actions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">destroy</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kr">const</span> <span class="nx">item</span> <span class="o">=</span> <span class="nx">get</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;item&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">item</span><span class="p">.</span><span class="nx">destroyRecord</span><span class="p">();</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we wanted for some reason to have a delay different than <code>0</code> for the test env, we could simply provide the value of the second argument:</p>

<figure class='code'><figcaption><span>app/components/display-todo-item.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">&#39;ember&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">timeoutForEnv</span> <span class="nx">from</span> <span class="s1">&#39;my-app/utils/timeout-for-env&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">get</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Component</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">destroyActionDelay</span><span class="o">:</span> <span class="nx">timeoutForEnv</span><span class="p">(</span><span class="mi">3000</span><span class="p">,</span> <span class="mi">1000</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">actions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">destroy</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kr">const</span> <span class="nx">item</span> <span class="o">=</span> <span class="nx">get</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;item&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">item</span><span class="p">.</span><span class="nx">destroyRecord</span><span class="p">();</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s it! It will work for both integration and acceptance tests.</p>

<h2>Wrapping Up</h2>

<p>Using a lot of <strong>timeouts</strong> and <strong>delays</strong> without special adjustments for tests can easily lead to a very <strong>slow test suite</strong> as the application grows. Fortunately, it&rsquo;s quite easy so solve such a problem by using <strong>environment-dependent</strong> config and setting the values to <code>0</code> for tests.</p>

<p>P.S. I&rsquo;ve just started <strong>writing a book</strong> about <strong>test-driving Ember</strong> applications. If you found this article useful, you are going to love it :). <strong>Subscribe</strong> to my newsletter to get updates and promotion code once it&rsquo;s released.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Driven Ember - Testing Holding a Button]]></title>
    <link href="https://karolgalanciak.com/blog/2017/03/26/test-driven-ember-testing-holding-button/"/>
    <updated>2017-03-26T23:00:00+02:00</updated>
    <id>https://karolgalanciak.com/blog/2017/03/26/test-driven-ember-testing-holding-button</id>
    <content type="html"><![CDATA[<p>Thanks to the awesome tools in <strong>Ember ecosystem</strong> such as <a href="http://github.com/samselikoff/ember-cli-mirage/" target="_blank">ember-cli-mirage</a>, <a href="https://github.com/emberjs/ember-test-helpers" target="_blank">ember-qunit</a> or <a href="https://github.com/emberjs/ember-test-helpers" target"_blank">ember-test-helpers</a> writing majority of the tests is pretty straight-forward. Nevertheless, there are quite a few cases where <strong>simulating user&rsquo;s interaction</strong> is not that simple. An example of such use case would be <strong>holding a button</strong> for particular period of time triggering some side effect.</p>

<!--more-->


<h2>Anatomy of The Problem</h2>

<p>Imagine you are implementing a feature of destroying some records in your application, e.g. the todo items from the list. It would be a bit unfortunate to destroy any item if a user <strong>accidentally clicked</strong> on the destroy button, so it might be a good idea to somehow make it harder to execute such an action. A simple approach would be displaying some alert <strong>asking user to confirm</strong> whether this item should be removed or not. This approach would get our job done, but it doesn&rsquo;t offer the best <strong>UX</strong>. What are the better options here?</p>

<p>A pretty cool solution to this problem would be making user <strong>hold a delete button</strong> for a particular period of time, e.g. for 3 seconds. Holding this button for less than 3 seconds wouldn&rsquo;t destroy the item, so it would be impossible to accidentally delete anything.</p>

<p>There is an addon which solves exactly this problem: <a href="https://www.npmjs.com/package/ember-hold-button" target="_blank">ember-hold-button</a>, so there is no need to reinvent the wheel. Let&rsquo;s add this to our application.</p>

<h2>Adding Destroy Action</h2>

<p>Let&rsquo;s start by installing <code>ember-hold-button</code> addon:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ember install ember-hold-button</span></code></pre></td></tr></table></div></figure>


<p>and assume that we already have some component for displaying a single item with <code>destroy</code> action:</p>

<figure class='code'><figcaption><span>app/components/display-todo-item.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">&#39;ember&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">get</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Component</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">actions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">destroy</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kr">const</span> <span class="nx">item</span> <span class="o">=</span> <span class="nx">get</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;item&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">item</span><span class="p">.</span><span class="nx">destroyRecord</span><span class="p">();</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/templates/components/display-todo-item.hbs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{{item.name}}
</span><span class='line'><span class="nt">&lt;button</span> <span class="err">{{</span><span class="na">action</span> <span class="err">&quot;</span><span class="na">destroy</span><span class="err">&quot;}}</span> <span class="na">data-test=</span><span class="s">&quot;destroy-item-btn&quot;</span><span class="nt">&gt;</span>Destroy<span class="nt">&lt;/button&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and that the component was test-driven with the following test written before the actual implementation (TDD for FTW!):</p>

<figure class='code'><figcaption><span>tests/integration/components/display-todo-item-test.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">&#39;ember&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">moduleForComponent</span><span class="p">,</span> <span class="nx">test</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;ember-qunit&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">hbs</span> <span class="nx">from</span> <span class="s1">&#39;htmlbars-inline-precompile&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">set</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">RSVP</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">moduleForComponent</span><span class="p">(</span><span class="s1">&#39;display-todo-item&#39;</span><span class="p">,</span> <span class="s1">&#39;Integration | Component | display todo item&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">integration</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;item can be destroyed&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">assert</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">item</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">destroyRecord</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">assert</span><span class="p">.</span><span class="nx">ok</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="s1">&#39;item should be destoyed&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="nx">RSVP</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">set</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;item&#39;</span><span class="p">,</span> <span class="nx">item</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">hbs</span><span class="err">`</span><span class="p">{{</span><span class="nx">display</span><span class="o">-</span><span class="nx">todo</span><span class="o">-</span><span class="nx">item</span> <span class="nx">item</span><span class="o">=</span><span class="nx">item</span><span class="p">}}</span><span class="err">`</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">$destroyBtn</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;[data-test=destroy-item-btn]&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$destroyBtn</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Basically this test verifies that the <code>destroyRecord</code> method will be called on item after clicking the button.</p>

<p>Let&rsquo;s add <code>hold-button</code> which will trigger <code>destroy</code> action after holding it for 3 seconds:</p>

<figure class='code'><figcaption><span>app/templates/components/display-todo-item.hbs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{{item.name}}
</span><span class='line'>{{#hold-button type=&quot;rectangle&quot; action=&quot;destroy&quot; delay=3000 data-test=&quot;destroy-item-btn&quot;}}
</span><span class='line'>  Destroy
</span><span class='line'>{{/hold-button}}
</span></code></pre></td></tr></table></div></figure>


<p><code>delay</code> option will get the job done here to make it holdable for 3 seconds to trigger <code>destroy</code> action.</p>

<p>The button is working great, but our test obviously is failing now! How can we simulate holding action in our integration tests?</p>

<h2>Testing Holding Interaction</h2>

<p>To solve that problem we should break the problem down into the single events. On desktop, pressing a button simply means triggering <code>mouseDown</code> event and releasing means trigger <code>mouseUp</code> event. On mobile that would be <code>touchStart</code> and <code>touchEnd</code> events accordingly.</p>

<p>Based on how <code>hold-button</code> component works, we may suspect that there is some internal timer which starts counting time after triggering <code>mouseDown</code> (<code>touchStart</code>) event or a scheduler which executes the action if it was held for required period of time and cancels it if it was released before that period of time, which would mean cancelling timer on <code>mouseUp</code> event.</p>

<p>After checking <a href="https://github.com/AddJam/ember-hold-button/blob/master/addon/components/hold-button.js" target="_blank">the internals</a>, it turns out this is exactly the case! Let&rsquo;s rewrite our test by triggering these events. We will also need two extra things as we are dealing with asynchronous actions:</p>

<ul>
<li><p><code>async()</code> / <code>done()</code> &ndash; To make sure QUnit will wait for an asynchronous operation to be finished we need to use <code>async()</code> function. That way QUnit will wait until <code>done()</code> is called. We will call <code>done()</code> after triggering <code>mouseUp</code> event. But we also need to wait until the action is executed. We will need <code>wait()</code> helper for that.</p></li>
<li><p><code>wait()</code> &ndash; it forces run loop to process all the pending events. That way we ensure that the asynchronous operation have been executed (like calling <code>destroy</code> action after 3 seconds).</p></li>
</ul>


<p>Here&rsquo;s our new test:</p>

<figure class='code'><figcaption><span>tests/integration/components/display-todo-item-test.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">&#39;ember&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">moduleForComponent</span><span class="p">,</span> <span class="nx">test</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;ember-qunit&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">hbs</span> <span class="nx">from</span> <span class="s1">&#39;htmlbars-inline-precompile&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">wait</span> <span class="nx">from</span> <span class="s1">&#39;ember-test-helpers/wait&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">set</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">RSVP</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">moduleForComponent</span><span class="p">(</span><span class="s1">&#39;display-todo-item&#39;</span><span class="p">,</span> <span class="s1">&#39;Integration | Component | display todo item&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">integration</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;item can be destroyed&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">assert</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">item</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">destroyRecord</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">assert</span><span class="p">.</span><span class="nx">ok</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="s1">&#39;item should be destoyed&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="nx">RSVP</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">set</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;item&#39;</span><span class="p">,</span> <span class="nx">item</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">hbs</span><span class="err">`</span><span class="p">{{</span><span class="nx">display</span><span class="o">-</span><span class="nx">todo</span><span class="o">-</span><span class="nx">item</span> <span class="nx">item</span><span class="o">=</span><span class="nx">item</span><span class="p">}}</span><span class="err">`</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">$destroyBtn</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;[data-test=destroy-item-btn]&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$destroyBtn</span><span class="p">.</span><span class="nx">mousedown</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">wait</span><span class="p">().</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$destroyBtn</span><span class="p">.</span><span class="nx">mouseup</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">done</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nice! Our test is passing again. However, there is one serious problem: this test is quite slow as it waits 3 second for the action to finish. Can we make it somehow faster?</p>

<h2>Making Our Test Faster</h2>

<p>The answer is: yes. We just need to provide a way to make <code>delay</code> configurable from the outside. This can be simply done by introducing <code>destroyActionDelay</code> property with default value equal <code>3000</code> and allowing it to be modified. Let&rsquo;s start with applying this little change to the test:</p>

<figure class='code'><figcaption><span>tests/integration/components/display-todo-item-test.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// the rest of the tests</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">hbs</span><span class="err">`</span><span class="p">{{</span><span class="nx">display</span><span class="o">-</span><span class="nx">todo</span><span class="o">-</span><span class="nx">item</span> <span class="nx">item</span><span class="o">=</span><span class="nx">item</span> <span class="nx">destroyActionDelay</span><span class="o">=</span><span class="mi">0</span><span class="p">}}</span><span class="err">`</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>We don&rsquo;t care about waiting for 3 seconds in the tests, we just want to test if it works and to make it fast. <code>0</code> sounds like the most reasonable value in such case.</p>

<p>And let&rsquo;s change few things in our component:</p>

<figure class='code'><figcaption><span>app/components/display-todo-item.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">&#39;ember&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">get</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Component</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">destroyActionDelay</span><span class="o">:</span> <span class="mi">3000</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">actions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">destroy</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kr">const</span> <span class="nx">item</span> <span class="o">=</span> <span class="nx">get</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;item&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">item</span><span class="p">.</span><span class="nx">destroyRecord</span><span class="p">();</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/templates/components/display-todo-item.hbs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{{item.name}}
</span><span class='line'>{{#hold-button type=&quot;rectangle&quot; action=&quot;destroy&quot; delay=destroyActionDelay data-test=&quot;destroy-item-btn&quot;}}
</span><span class='line'>  Destroy
</span><span class='line'>{{/hold-button}}
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s it! You can now enjoy the much faster test suite!</p>

<h2>Wrapping Up</h2>

<p>Testing holding a button for particular period of time doesn&rsquo;t sound like an obvious thing to do. Fortunately, with proper design and understanding the interaction from the <strong>browser&rsquo;s perspective</strong>, it isn&rsquo;t that hard to do and doesn&rsquo;t necessarily make your tests slower.</p>

<p>P.S. I&rsquo;ve just started <strong>writing a book</strong> about <strong>test-driving Ember</strong> applications. If you found this article useful, you are going to love it :). <strong>Subscribe</strong> to my newsletter to get updates and promotion code once it&rsquo;s released.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript Tips: Redefining userAgent property]]></title>
    <link href="https://karolgalanciak.com/blog/2017/02/26/javascript-tips-redefining-useragent-property/"/>
    <updated>2017-02-26T23:00:00+01:00</updated>
    <id>https://karolgalanciak.com/blog/2017/02/26/javascript-tips-redefining-useragent-property</id>
    <content type="html"><![CDATA[<p>Imagine a use case where you are trying to check if a user accessed your app from a <strong>mobile</strong> device or not. Most likely you will need to use <a href="https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/userAgent" target="_blank">navigator.userAgent</a>  property and craft some smart regular expression to test for the presence of particular expression, like <code>(/Mobi/.test(navigator.userAgent)</code> which seems to be the <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent" target="_blank">recommended way</a> to do it. Ok, so we&rsquo;re almost done with our feature, we just need to add some tests to make sure it works as expected. But there&rsquo;s a problem &ndash; you can&rsquo;t redefine <code>userAgent</code> property with just using a setter! Fortunately, there is a way to solve this problem.</p>

<!--more-->


<h2>Anatomy of the problem</h2>

<div class="img-center-wrapper">
  <img src="https://karolgalanciak.com/images/useragent/one_does_not_simply_override_useragent.jpg" title="'one does not simply override user agent'" >
</div>


<p>Let&rsquo;s check what happens when we try to override <code>navigator.userAgent</code> property with a setter in a browser.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span>
</span><span class='line'><span class="o">&lt;</span> <span class="s2">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_2) AppleWebKit/602.3.12 (KHTML, like Gecko) Version/10.0.2 Safari/602.3.12&quot;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span> <span class="o">=</span> <span class="s2">&quot;Mobile&quot;</span>
</span><span class='line'><span class="o">&lt;</span> <span class="s2">&quot;Mobile&quot;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span>
</span><span class='line'><span class="o">&lt;</span> <span class="s2">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_2) AppleWebKit/602.3.12 (KHTML, like Gecko) Version/10.0.2 Safari/602.3.12&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, that&rsquo;s not exactly what we wanted to be returned. But we need to override this value somehow to test both behaviours &ndash; when the device is a mobile one and not a mobile one. Fortunately, <strong>JavaScript</strong> is quite powerful at this point and it&rsquo;s possibly to redefine such property using <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank"><code>Object.defineProperty</code></a>.</p>

<h2>Object.defineProperty to the Rescue</h2>

<p><code>Object.defineProperty</code> allows to define a new property or redefine an existing one on a  given object. The syntax is following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">prop</span><span class="p">,</span> <span class="nx">descriptor</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>descriptor</code> argument is a particularly interesting one &ndash; it allows to define a <code>value</code> of the property, a getter, a setter, whether the property should be <code>enumerable</code> (if it&rsquo;s going to be included when iterating over the properties), if it&rsquo;s <code>writable</code> (if the value can be changed with an assignment operator) and <code>configurable</code> (if the property can be changed and deleted from the object&rsquo;s properties).</p>

<p>Looks like <code>value</code> is exactly what we need. Let&rsquo;s try it then:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">navigator</span><span class="p">,</span> <span class="s1">&#39;userAgent&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;Mobile&#39;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span> <span class="s2">&quot;Mobile&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looks good so far. What if we wanted to override this property again?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span> <span class="o">=</span> <span class="s1">&#39;Desktop&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span> <span class="s2">&quot;Mobile&quot;</span><span class="p">;</span> <span class="c1">// whooops</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hmm, doesn&rsquo;t work, maybe let&rsquo;s try to redefine this propert again then?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">navigator</span><span class="p">,</span> <span class="s1">&#39;userAgent&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;Mobile&#39;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span> <span class="nx">TypeError</span><span class="o">:</span> <span class="nx">Attempting</span> <span class="nx">to</span> <span class="nx">change</span> <span class="nx">value</span> <span class="nx">of</span> <span class="nx">a</span> <span class="nx">readonly</span> <span class="nx">property</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Apparently it&rsquo;s not that great as we thought it would be. However, that&rsquo;s not a problem! We just need to make this property either <code>configurable</code> or <code>writable</code>! Let&rsquo;s check both scenarios:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">navigator</span><span class="p">,</span> <span class="s1">&#39;userAgent&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;Mobile&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">configurable</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span> <span class="s2">&quot;Mobile&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">navigator</span><span class="p">,</span> <span class="s1">&#39;userAgent&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;Desktop&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">configurable</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span> <span class="s2">&quot;Desktop&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span> <span class="o">=</span> <span class="s2">&quot;Mobile&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span> <span class="s2">&quot;Desktop&quot;</span> <span class="c1">// setter won&#39;t work here!</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">navigator</span><span class="p">,</span> <span class="s1">&#39;userAgent&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;Mobile&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">writable</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span> <span class="s2">&quot;Mobile&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span> <span class="o">=</span> <span class="s1">&#39;Desktop&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span> <span class="s2">&quot;Desktop&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">navigator</span><span class="p">,</span> <span class="s1">&#39;userAgent&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;Mobile&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">writable</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span> <span class="s2">&quot;Mobile&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Both of the ways work just fine, however, <code>writable</code> is a bit more flexible as it allows to change the <code>value</code> returned by a given property by redefining this property or using a simple setter. In case of <code>configurable</code> you can only redefine a property.</p>

<h2>Wrapping Up</h2>

<p>Maybe <strong>JavaScript</strong> has some odd parts, nevertheless, it&rsquo;s a quite powerful language. Changing the value of read-only properties is probably not a something do you will do often, but if you really need to do it, <code>Object.defineProperty</code> will be your friend.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript: The Surprising Parts]]></title>
    <link href="https://karolgalanciak.com/blog/2017/01/22/javascript-the-surprising-parts/"/>
    <updated>2017-01-22T22:45:00+01:00</updated>
    <id>https://karolgalanciak.com/blog/2017/01/22/javascript-the-surprising-parts</id>
    <content type="html"><![CDATA[<p>Do you think you know all the surprising parts of <strong>JavaScript</strong>? Some of these &#8220;features&#8221; may look as if the language was broken, but it&#8217;s not necessarily the case. Things like <strong>variables hoisting</strong>, <strong>variables scope</strong>, behaviour of <code>this</code> are quite intentional and besides just being different from most of other programming languages, there is nothing particularly wrong with them. However, there are still some things that are quite surprising about <strong>JavaScript</strong>. Let&#8217;s take a look at some of them.</p>




<!--more-->




<h2>Surprise #1 - <code>parseInt</code> function</h2>




<p>Imagine you have some numbers as strings and you want to convert them to integers. You could probably use <code>Number()</code> function to do that, but let&#8217;s assume you are used to <code>parseInt()</code> function. Let&#8217;s do some conversions then:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">[</span><span class="s2">&quot;1&quot;</span><span class="p">].</span><span class="nx">map</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">);</span>
</span><span class='line'><span class="c1">// [1]</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&quot;3&quot;</span><span class="p">,</span> <span class="mi">4</span><span class="p">].</span><span class="nx">map</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">);</span>
</span><span class='line'><span class="c1">// =&gt; [1, NaN, NaN, NaN] // WUT ?!</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&quot;3&quot;</span><span class="p">,</span> <span class="mi">4</span><span class="p">].</span><span class="nx">map</span><span class="p">(</span><span class="nb">parseFloat</span><span class="p">);</span>
</span><span class='line'><span class="c1">// =&gt; [1, 2, 3, 4] // WUT...</span>
</span></code></pre></td></tr></table></div></figure>




<p>Something is definitely wrong here. How could possibly <code>parseFloat()</code> work fine here and <code>parseInt()</code> not? Obviously <strong>JavaScript</strong> is broken, right?</p>




<p>Not really. This is actually the expected behaviour. The difference between <code>parseFloat</code> and <code>parseInt()</code> is that <code>parseFloat()</code> takes only one argument (<code>string</code>), but <code>parseInt()</code>takes two arguments - <code>string</code> and&#8230; <code>radix</code>. To verify it, let&#8217;s rewrite the mapping using an anonymous function:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">[</span><span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&quot;3&quot;</span><span class="p">,</span> <span class="mi">4</span><span class="p">].</span><span class="nx">map</span><span class="p">((</span><span class="nx">number</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">number</span><span class="p">));</span>
</span><span class='line'><span class="c1">// =&gt; [1, 2, 3, 4]</span>
</span></code></pre></td></tr></table></div></figure>




<p>When you pass simply <code>parseInt()</code> function as an argument to <code>map()</code>, the second argument (which is a current index) is going to be passed as <code>radix</code> to <code>parseInt</code>, which explains why it returns <code>NaN</code>. The equivalent of just passing <code>parseInt</code> looks like this:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">[</span><span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&quot;3&quot;</span><span class="p">,</span> <span class="mi">4</span><span class="p">].</span><span class="nx">map</span><span class="p">((</span><span class="nx">number</span><span class="p">,</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">array</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">number</span><span class="p">,</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">array</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>




<p>As &#8220;odd&#8221; as it may look like, this is a perfectly valid behaviour and there is nothing wrong with <code>JavaScript</code> ;).</p>




<h2>Surprise #2 - sorting</h2>




<p>Now that we&#8217;ve learned how to parse integers in <strong>JavaScript</strong> like a boss, let&#8217;s do some sorting:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">100</span><span class="p">].</span><span class="nx">sort</span><span class="p">();</span>
</span><span class='line'><span class="c1">// =&gt; [1, 100, 2, 20] // WUT again...</span>
</span></code></pre></td></tr></table></div></figure>




<p>Again, something odd is going on here. However, this is the intended behavior - after consulting with <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" target="_blank">docs</a>, we can learn that <code>sort()</code> converts all elements into strings and compares them in Unicode code point order. I think this might be a big surprise for a majority of developers performing sorting and seeing the result, but this behaviour is clearly documented. Due to the necessity of maintaing backwards compatibility, I wouldn&#8217;t expect this behavior to change, so it&#8217;s worth keeping it in mind.</p>




<p>To perform sorting on integers you need to provide a <strong>compare function</strong>:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">100</span><span class="p">].</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span><span class="p">);</span>
</span><span class='line'><span class="c1">// =&gt; [1, 2, 20, 100]</span>
</span></code></pre></td></tr></table></div></figure>




<h2>Surprise #3 - <code>==</code> vs. <code>===</code></h2>




<p>You&#8217;ve probably heard that you should never use <strong>double equals</strong> (loose equality) and just stick to <strong>triple equals</strong> (strict equaility). But following some rules without understanding the reasons behind them is never a good solution to a problem. Let&#8217;s try to understand how these operators work.</p>




<p><strong>Loose equality</strong> (<strong>==</strong>) compares two values after converting them to <strong>common type</strong>. After conversions (both of the values can be converted) the comparison is performed by strict equality (<strong>===</strong>). So what is a <strong>common type</strong> in this case?</p>




<p>The easiest way to get the idea what happens when using <code>==</code> would be checking the table for conversion rules <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using" target="_blank">here</a> as it&#8217;s not really something obvious (the details of how conversion works are described later in this article).</p>




<p>So basically this table says that the following expressions will be truthy:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="mi">1</span> <span class="o">==</span> <span class="s2">&quot;1&quot;</span><span class="p">;</span>
</span><span class='line'><span class="s2">&quot;1&quot;</span> <span class="o">==</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&quot;string&quot;</span><span class="p">;</span>
</span><span class='line'><span class="mi">1</span> <span class="o">==</span> <span class="p">{</span> <span class="nx">valueOf</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span> <span class="p">}</span> <span class="p">};</span> <span class="c1">// lulz, it&#39;s not a joke ;)</span>
</span><span class='line'><span class="mi">1</span> <span class="o">==</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="kc">false</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="s2">&quot;Fri Jan 01 2016 00:00:00 GMT+0100 (CET)&quot;</span> <span class="o">==</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">2016</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="s2">&quot;1,2&quot;</span> <span class="o">==</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span> <span class="c1">// because why not?</span>
</span></code></pre></td></tr></table></div></figure>




<p>Seems quite &#8220;exotic&#8221;, right? But is <strong>loose equality</strong> actually useful?</p>




<p>Yes, it is. I can imagine 3 scenarios where it comes in handy.</p>




<p>The first scenario would be comparing integers from the forms when you don&#8217;t really care about strict equality and types:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.my-awesome-input&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">()</span> <span class="o">==</span> <span class="mi">100</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// do something here</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>In such case it may turn out that we don&#8217;t really care if we compare strings or integers, either <code>"100"</code> and <code>100</code> are fine and we don&#8217;t need to perform any explicit conversions.</p>




<p>The second use case would be treating both <code>undefined</code> and <code>null</code> as the same thing meaning lack of some value. With strict equality we would need to check for both values:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">x</span> <span class="o">=</span> <span class="nx">getSomeValue</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">!==</span> <span class="kc">undefined</span> <span class="o">&amp;&amp;</span> <span class="nx">x</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// some logic</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>Doesn&#8217;t look that nice. We could clean it up with loose equality and simply check if something is not <code>null</code>-ish:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">x</span> <span class="o">=</span> <span class="nx">getSomeValue</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// some logic</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>The last use case would be comparing <strong>primitives</strong> and <strong>objects</strong>. It&#8217;s especially useful when dealing with both primitive strings (<code>"simple string"</code>) and strings as objects (<code>new String("string as object")</code>:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">x</span> <span class="o">=</span> <span class="nx">getSomeValue</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">!=</span> <span class="s2">&quot;some special value&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// some logic</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>With strict equality we would probably need to explicitly convert objects to strings using <code>toString()</code>, which is not that bad, but loose equality looks arguably cleaner.</p>




<h2>Surprise #4 - equality gotcha #1: <code>NaN</code></h2>




<p>Do you know how to identify <strong>NaN</strong> in <strong>JavaScript</strong>. Sounds like a silly question, right? Well, not really, both of the following expressions are falsey:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kc">NaN</span> <span class="o">==</span> <span class="kc">NaN</span><span class="p">;</span> <span class="c1">// =&gt; false</span>
</span><span class='line'><span class="kc">NaN</span> <span class="o">===</span> <span class="kc">NaN</span><span class="p">;</span> <span class="c1">// =&gt; false</span>
</span></code></pre></td></tr></table></div></figure>




<p>Fortunately, there is still a way to check for <code>NaN</code>: it is the only value in JS that is not equal to itself:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kc">NaN</span> <span class="o">!=</span> <span class="kc">NaN</span><span class="p">;</span> <span class="c1">// =&gt; true</span>
</span><span class='line'><span class="kc">NaN</span> <span class="o">!==</span> <span class="kc">NaN</span><span class="p">;</span> <span class="c1">// =&gt; true</span>
</span></code></pre></td></tr></table></div></figure>




<p>You could either take advantage of this behaviour or use <code>isNaN</code> function:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nb">isNaN</span><span class="p">(</span><span class="kc">NaN</span><span class="p">);</span> <span class="c1">// =&gt; true</span>
</span></code></pre></td></tr></table></div></figure>




<p>There is one more possibility to test for <code>NaN</code>: <code>Object.is</code> function, which is very similar to <strong>strict equality</strong>, but with few exceptions. One of those is comparing <code>NaN</code> values:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kc">NaN</span> <span class="o">===</span> <span class="kc">NaN</span> <span class="c1">// =&gt; false</span>
</span><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="kc">NaN</span><span class="p">,</span> <span class="kc">NaN</span><span class="p">);</span> <span class="c1">// =&gt; true</span>
</span></code></pre></td></tr></table></div></figure>




<h2>Surprise #5 - equality gotcha #2: comparing objects</h2>




<p>There is one more gotcha besides <code>NaN</code> when it comes to testing for equality: <strong>comparing objects</strong>. If you think you can easily compare arrays with the same elements or objects with the same keys and values, you might be quite surprised:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="o">==</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span> <span class="c1">// false</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="o">===</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span> <span class="c1">// false</span>
</span><span class='line'><span class="p">{</span> <span class="nx">comparing</span><span class="o">:</span> <span class="s2">&quot;objects&quot;</span> <span class="p">}</span> <span class="o">==</span> <span class="p">{</span> <span class="nx">comparing</span><span class="o">:</span> <span class="s2">&quot;objects&quot;</span> <span class="p">};</span> <span class="c1">// false</span>
</span><span class='line'><span class="p">{</span> <span class="nx">comparing</span><span class="o">:</span> <span class="s2">&quot;objects&quot;</span> <span class="p">}</span> <span class="o">===</span> <span class="p">{</span> <span class="nx">comparing</span><span class="o">:</span> <span class="s2">&quot;objects&quot;</span> <span class="p">};</span> <span class="c1">// false</span>
</span></code></pre></td></tr></table></div></figure>




<p>The reason behind it is quite simple though: <strong>strict equality</strong> doesn&#8217;t compare the values, but identities instead. And two different objects are, well, different, unless they are referring to the exactly same thing.</p>




<p>How about <strong>loose equality</strong>? As already discussed, if the types are the same, the values are compared using <strong>strict equality</strong>. It doesn&#8217;t work with <code>Object.is</code> either. The only option for objects is to compare each key and associated value with the ones from the other object.</p>




<h2>Surprise #6 - <code>instanceof</code> and <code>typeof</code></h2>




<p>There seems to be a lot of confusion regarding those two and how use them in different contexts. Basically, <code>typeof</code> should be used for getting the basic <strong>JavaScript</strong> type of given <strong>expression</strong> (i.e. undefined, object, boolean, string, number, string, function or symbol) and <strong>instanceof</strong> should be used for checking if a prototype of a given constructor is present in expression&#8217;s prototype chain. Even if they may seem to be similar at times, they should be used in very different use cases, check the following examples:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">typeof</span> <span class="s2">&quot;basic string&quot;</span>  <span class="c1">// =&gt; &quot;string&quot;, it&#39;s a primitive so looks good so far</span>
</span><span class='line'><span class="k">typeof</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="s2">&quot;basic string&quot;</span> <span class="p">)</span> <span class="c1">// =&gt; &quot;object&quot;, because it&#39;s no longer a primitive!</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;basic string&quot;</span> <span class="k">instanceof</span> <span class="nb">String</span> <span class="c1">// =&gt; false, because &quot;basic string&quot; is a primitive</span>
</span><span class='line'><span class="mi">1</span> <span class="k">instanceof</span> <span class="nb">Number</span> <span class="c1">// =&gt; false, same reason, 1 is a primitive</span>
</span><span class='line'>
</span><span class='line'><span class="p">[]</span> <span class="k">instanceof</span> <span class="nb">Array</span> <span class="c1">// =&gt; true</span>
</span><span class='line'><span class="p">[]</span> <span class="k">instanceof</span> <span class="nb">Object</span> <span class="c1">// =&gt; true, array is not a primitive</span>
</span><span class='line'>
</span><span class='line'><span class="k">typeof</span> <span class="p">[]</span> <span class="c1">// =&gt; &quot;object&quot;, there is no array primitive, it&#39;s still an object</span>
</span></code></pre></td></tr></table></div></figure>




<p>Unforunately, it&#8217;s not that easy in all cases. There are 2 exceptions regarding usage of <code>typeof</code> that are quite surprising.</p>




<p>There is <strong>undefined</strong> type which would be returned for <code>undefined</code> expression, but what about <code>null</code>? Turns out that its type is <strong>object</strong>! There were some attempts to remove this confusion - like this proposal for introducing <a href="http://wiki.ecmascript.org/doku.php?id=harmony:typeof_null" target="_blank">null type</a> - but they were eventually rejected.</p>




<p>And another suprise: <strong>NaN</strong>. What is the type of something that is not a number? Well, it&#8217;s <strong>number</strong> of course ;). As funny as it sounds, it is in accordance with <a href="https://en.wikipedia.org/wiki/IEEE_floating_point" target="_blank">IEEE Standard for Floating-Point Arithmetic</a> and the concept of <code>NaN</code> is kind of number-ish, so this behaviour is somehow justified.</p>




<h2>Surprise #7 - <code>Number.toFixed()</code> returning strings</h2>




<p>Imagine you want to round some number in <strong>JavaScript</strong> and do some math with it. Apparently <code>Math.round()</code> is capable only of rounding to the nearest integer, so we need to find some better solution. There is <code>Number.toFixed()</code> function which seems to do the job. Let&#8217;s try it out:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="mf">123.789</span><span class="p">.</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span> <span class="c1">// =&gt; 123.82, huh?</span>
</span></code></pre></td></tr></table></div></figure>




<p>Is math broken in JS? Not really. It&#8217;s just the fact that <code>Number.toFixed()</code> returns a string, not a numeric type! And its intention is not really to perform rounding for math operations, it&#8217;s only for formatting! Too bad there is no built-in function to do such simple operation, but if you expect a numeric type, you can just handle it with <code>+</code> <strong>unary prefix operator</strong>, which won&#8217;t be used as an <strong>addition operator</strong>, but will perform <strong>conversion to number</strong> in such case:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">number</span> <span class="o">=</span> <span class="o">+</span><span class="mf">123.789</span><span class="p">.</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nx">number</span> <span class="c1">// =&gt; 123.8</span>
</span></code></pre></td></tr></table></div></figure>




<h2>Surprise #8 - Plus (<code>+</code>) operator and results of addition</h2>




<blockquote>&#8220;Adding stuff in JavaScript is simple, obvious and not surprising&#8221; - No one ever</blockquote>




<p>Have you ever watched <a href="https://www.destroyallsoftware.com/talks/wat" target="_blank">Wat</a> by Gary Bernhardt? If not, I highly encourage you to do it now, it&#8217;s absolutely hillarious and concerns a lot of &#8220;odd&#8221; parts of <strong>JavaScript</strong>.</p>




<p>Let&#8217;s try to explain most of those odd results when using <code>+</code> operator. Beware: once you finishing reading it, you will actually not find most of these results that surprising, it will be just &#8220;different&#8221;. I&#8217;m not sure yet if it&#8217;s a good or a bad thing :).</p>




<p>Take a look at the following examples:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">[]</span> <span class="o">+</span> <span class="p">[]</span> <span class="c1">// =&gt; &quot;&quot;</span>
</span><span class='line'><span class="p">[]</span> <span class="o">+</span> <span class="p">{}</span> <span class="c1">// =&gt; &quot;[object Object]&quot;</span>
</span><span class='line'><span class="p">{}</span> <span class="o">+</span> <span class="p">[]</span> <span class="c1">// =&gt; 0 // wut...</span>
</span><span class='line'><span class="p">{}</span> <span class="o">+</span> <span class="p">{}</span> <span class="c1">// =&gt; &quot;[object Object][object Object]&quot;</span>
</span><span class='line'><span class="p">[]</span> <span class="o">+</span> <span class="mi">1</span> <span class="c1">// =&gt; &quot;1&quot; // it&#39;s a string!</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">=&gt;</span> <span class="c1">// =&gt; &quot;12&quot;</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="mi">2</span> <span class="c1">// =&gt; &quot;1,22&quot;</span>
</span><span class='line'><span class="mi">3</span> <span class="o">+</span> <span class="kc">true</span> <span class="c1">// =&gt; 4</span>
</span><span class='line'><span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">2016</span><span class="p">,</span> <span class="mi">0</span> <span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="mi">123</span> <span class="c1">// =&gt; &quot;Fri Jan 01 2016 00:00:00 GMT+0100 (CET)123&quot;</span>
</span><span class='line'><span class="p">({</span> <span class="nx">toString</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s2">&quot;trolololo&quot;</span><span class="p">;</span> <span class="p">}</span> <span class="p">})</span> <span class="o">+</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">2016</span><span class="p">,</span> <span class="mi">0</span> <span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="c1">// =&gt; &quot;trolololoFri Jan 01 2016 00:00:00 GMT+0100 (CET)&quot;</span>
</span><span class='line'><span class="mi">1</span> <span class="o">+</span> <span class="p">{</span> <span class="nx">valueOf</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">10</span><span class="p">;</span> <span class="p">},</span> <span class="nx">toString</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">5</span><span class="p">;</span> <span class="p">}</span> <span class="p">}</span> <span class="c1">// =&gt; 11</span>
</span><span class='line'><span class="mi">1</span> <span class="o">+</span> <span class="p">{</span> <span class="nx">toString</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">10</span><span class="p">;</span> <span class="p">}</span> <span class="p">}</span> <span class="c1">// =&gt; 11</span>
</span><span class='line'><span class="mi">1</span> <span class="o">+</span> <span class="kc">undefined</span> <span class="c1">// =&gt; NaN</span>
</span><span class='line'><span class="mi">1</span> <span class="o">+</span> <span class="kc">null</span> <span class="c1">// =&gt; 1</span>
</span></code></pre></td></tr></table></div></figure>




<div class="img-center-wrapper">
  <img src="https://karolgalanciak.com/images/js_results_not_so_wut.jpg" title="js_results_not_so_wut" alt="js_results_not_so_wut">
</div>




<p>All of these results may seem to be somehow exotic, but only one of them, maybe two at most, are exceptional. The basic thing before figuring out the result of those expressions is understanding what is happening under the hood. In <strong>JavaScript</strong> you can only add numbers and strings, all other types must be converted to one of thos before. The <code>+</code> operator basically converts each value to primitive (which are: undefined, null, booleans, numbers and strings). This convertion is handled by the internal operation called <code>ToPrimitive</code> which has the following signature: <code>ToPrimitive(input, PreferredType)</code>. The <code>PreferredType</code> can be either <strong>number</strong> or <strong>string</strong>. The algorithm of this operation is quite simple, here are the steps if <strong>string</strong> is the preferred type:</p>




<ul>
  <li>return <code>input</code> if it&#8217;s already a primitive</li>
  <li>If it&#8217;s not a primitive, call <code>toString()</code> method on <code>input</code> and return the result if it&#8217;s a primitive value</li>
  <li>If it&#8217;s not a primitive, call <code>valueOf()</code> method on <code>input</code> and return the result if it&#8217;s a primitive value</li>
  <li>If it&#8217;s not a primitive, throw <code>TypeError</code></li>
</ul>




<p>For <code>number</code> as preferred type the only difference is the sequence of steps 2 and 3: <code>valueOf</code> method will be called first and if it doesn&#8217;t return a primitive then <code>toString</code> method wil be called. In most cases <code>number</code> will be the preferred type, <code>string</code> will be used only when dealing with the instances of <code>Date</code>.</p>




<p>Now that we know what is going on under the hood let&#8217;s explain the results from the examples above.</p>




<p>The result of calling <code>valueOf</code> method on <strong>objects</strong> (<code>{}</code>) and <strong>arrays</strong> (which technically are also objects) is simply the object itself, so it&#8217;s not a primitive. However, for objects <code>toString()</code> method will return <code>"[object Object]"</code> and for arrays it will return empty string - <code>""</code>. Now we have primitives that can be added. From this point we can predict the results of operation like <code>{} + {}</code>, <code>[] + {}</code> or even:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="mi">1</span> <span class="o">+</span> <span class="p">{</span> <span class="nx">valueOf</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">10</span><span class="p">;</span> <span class="p">},</span> <span class="nx">toString</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">5</span><span class="p">;</span> <span class="p">}</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<p>and: </p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="mi">1</span> <span class="o">+</span> <span class="p">{</span> <span class="nx">toString</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">10</span><span class="p">;</span> <span class="p">}</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<p>If you remember that <string>string</string> is the preferred type for operations involving dates, the result of <code>({ toString: function() { return "surprise!"; } }) + new Date(2016, 0 , 1)</code> is not really surprising anymore. But how is it possible that <code>{} + []</code> returns <code>0</code>, not <code>"[object Object]"</code>?</p>




<p>Most likely <code>{}</code> in the beginning is interpreted as an empty block and it&#8217;s ignored. You can verify it by putting the empty object inside parentheses (<code>({}) + []</code>), the result will be <code>"[object Object]"</code>. So in fact that expression is interpreted as <code>+[]</code> which is very different from the addition! As I&#8217;ve already mentioned before, it&#8217;s the <strong>unary prefix operator</strong> which performs conversion to number. For arrays the result of such conversion is simply 0.</p>




<p>And why does <code>1 + undefined</code> return <code>NaN</code>? We can add only numbers and strings, <code>undefined</code> is neither of them, so it must be converted to a number in this case. The result of such operation is simply <code>NaN</code> and <code>1 + NaN</code> is still <code>NaN</code>.</p>




<h2>Surprise #9 - No integers and floats - just numbers</h2>




<p>In most programming languages there are different type of numbers, like integers and floats. What is again surprising about <strong>JavaScript</strong> is that all numbers are simply double precision floating point numbers! This has a huge impact of anything related to math, even for such things like precision. Take a look at the following example:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="mi">9999999999999999</span> <span class="o">===</span> <span class="mi">10000000000000000</span> <span class="c1">// =&gt; true</span>
</span></code></pre></td></tr></table></div></figure>




<p>This is definitely not something that would be expected here. If you are planning to do any serious math in <strong>JavaScript</strong>, make sure you won&#8217;t run into any issues caused by the implementation of the numbers.</p>




<h2>Wrapping up</h2>




<p><strong>JavaScript</strong> may sometimes seem like it&#8217;s &#8220;broken&#8221; somehow, especially comparing to other programming languages. However, many of these features are quite <strong>intentional</strong> and others are consequences of some decisions. There are still few things that seem to be really odd, but after digging deeper they start to make sense (or at least don&#8217;t look like some voodoo magic), so to avoid unfortunate surprises it&#8217;s definitely worth learning about those odd parts of <strong>JavaScript</strong>.</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ember Tips: Computed Properties And Arrow Functions? Not A Good Idea]]></title>
    <link href="https://karolgalanciak.com/blog/2016/12/11/ember-tips-computed-properties-and-arrow-functions-not-a-good-idea/"/>
    <updated>2016-12-11T22:00:00+01:00</updated>
    <id>https://karolgalanciak.com/blog/2016/12/11/ember-tips-computed-properties-and-arrow-functions-not-a-good-idea</id>
    <content type="html"><![CDATA[<p><strong>Arrow function expressions</strong> were definitely a great addition in ES6 and thanks to tools like <a href="https://babeljs.io" target="_blank">babel</a> the new syntax has been quite widely adopted. Besides more concise syntax, an interesting thing about <strong>arrow function expressions</strong> is that they preserve the context, i.e. they don&#8217;t define their own <code>this</code>, which was sometimes annoying and resulted in assigning <code>that</code> or <code>self</code> variables to keep the outer context that could be referred inside functions. As great as it sounds, <strong>arrow function expressions</strong> cannot be used in all cases. One example would be <strong>Ember computed properties</strong>.</p>




<!--more-->




<h2>Arrow Function Expressions - A Quick Introduction</h2>




<p>Let&#8217;s start with a quick introduction to arrow functions. Before ES6, anytime we were using <strong>function expressions</strong> and wanted to refer <code>this</code> from outer context, we had to do some workarounds which are (arguably) a bit unnatural, especially comparing to other major programming languages.</p>




<p>Let&#8217;s do some pseudo-object-oriented programming with JavaScript (ES5) to illustrate a possible issue with <strong>function expressions</strong>:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">Order</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">((</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">10000000</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// don&#39;t do it in a production code ;)</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">items</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Order</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">addItem</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Order</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">logItems</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;item description: &quot;</span> <span class="o">+</span> <span class="nx">item</span><span class="p">.</span><span class="nx">description</span> <span class="o">+</span> <span class="s2">&quot; for order with id: &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">order</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Order</span><span class="p">();</span>
</span><span class='line'><span class="nx">order</span><span class="p">.</span><span class="nx">addItem</span><span class="p">({</span> <span class="nx">description</span><span class="o">:</span> <span class="s1">&#39;Glimmer 2 rockzzz&#39;</span> <span class="p">});</span>
</span><span class='line'><span class="nx">order</span><span class="p">.</span><span class="nx">logItems</span><span class="p">();</span>  <span class="c1">// whooops</span>
</span></code></pre></td></tr></table></div></figure>




<p>We have a simple class-like functionality using <strong>constructor function</strong> and <strong>prototype</strong> to implement <code>Order</code> with some questionable ( ;) ) way of assigning id and some <code>items</code>. We can add more items with <code>Order.prototype.addItem</code> function and we can log them with <code>Order.prototype.logItems</code> function.</p>




<p>But there&#8217;s a problem: <code>logItems</code> function doesn&#8217;t log <code>id</code>, but logs <code>undefined</code> instead. Why is that?</p>




<p><strong>Function expressions</strong> create their own context and define own <code>this</code>, so it no longer refers to the outer context, which is the <code>order</code> instance. There are several ways to solve this problem.</p>




<p>The most obvious is to assign outer <code>this</code> to some other variable, like <code>that</code> or <code>self</code>:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Order</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">logItems</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;item description: &quot;</span> <span class="o">+</span> <span class="nx">item</span><span class="p">.</span><span class="nx">description</span> <span class="o">+</span> <span class="s2">&quot; for order with id: &quot;</span> <span class="o">+</span> <span class="nx">self</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>You can also pass outer <code>this</code> as a second argument to <code>forEach</code> function:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Order</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">logItems</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;item description: &quot;</span> <span class="o">+</span> <span class="nx">item</span><span class="p">.</span><span class="nx">description</span> <span class="o">+</span> <span class="s2">&quot; for order with id: &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>You can even explicitly <code>bind</code> outer <code>this</code> to callback argument inside <code>forEach</code> function:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Order</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">logItems</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;item description: &quot;</span> <span class="o">+</span> <span class="nx">item</span><span class="p">.</span><span class="nx">description</span> <span class="o">+</span> <span class="s2">&quot; for order with id: &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>All these solutions work, but aren&#8217;t really that clean. Fortunately, since ES6, we can use <code>arrow function expressions</code> which preserve outer context and don&#8217;t define own <code>this</code>. After little refactoring <code>Order.prototype.logItems</code> could look like this:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Order</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">logItems</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;item description: &quot;</span> <span class="o">+</span> <span class="nx">item</span><span class="p">.</span><span class="nx">description</span> <span class="o">+</span> <span class="s2">&quot; for order with id: &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>Much Better!</p>




<p>As great as it looks like, it may not be a good idea to apply <strong>arrow function expressions</strong> everywhere, especially for <strong>Ember computed properties</strong>.</p>




<h2>Ember Computed Properties And Arrow Functions? - Not A Good Idea</h2>




<p>Recently I was doing some refactoring in one Ember app. The syntax in one of the models was a bit mixed and there were some <strong>function expressions</strong> and <strong>arrow function expressions</strong> which looked a bit like this:</p>




<figure class='code'><figcaption><span>app/models/user.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s2">&quot;ember&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Model</span> <span class="nx">from</span> <span class="s1">&#39;ember-data/model&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">fullname</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">computed</span><span class="p">(</span><span class="s1">&#39;firstname&#39;</span><span class="p">,</span> <span class="s1">&#39;lastname&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;firstName&#39;</span><span class="p">)}</span> <span class="nx">$</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;lastName&#39;</span><span class="p">)}</span><span class="err">`</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}),</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">doThis</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// some logic goes here</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">doThat</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// even more logic</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">doYetAnotherThing</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// more logic</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>So I decided ES6-ify entire syntax here and ended up with the following code:</p>




<figure class='code'><figcaption><span>app/models/user.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s2">&quot;ember&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Model</span> <span class="nx">from</span> <span class="s1">&#39;ember-data/model&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">fullname</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">computed</span><span class="p">(</span><span class="s1">&#39;firstname&#39;</span><span class="p">,</span> <span class="s1">&#39;lastname&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;firstName&#39;</span><span class="p">)}</span> <span class="nx">$</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;lastName&#39;</span><span class="p">)}</span><span class="err">`</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}),</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">doThis</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// some logic goes here</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">doThat</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// even more logic</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">doYetAnotherThing</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// more logic</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>And how did this refactoring end up? Well, instead of a proper <code>fullName</code> I was getting <code>undefined undefined</code>! That was surprising, but then I looked at the changes and saw that I&#8217;m using <strong>arrow function expressions</strong> in computed properties and referring there to <code>this</code>, which won&#8217;t obviously work for the reasons mentioned before. So what are the options for computed properties?</p>




<p>The first one would be to simply use good ol&#8217; <strong>function expressions</strong>:</p>




<figure class='code'><figcaption><span>app/models/user.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s2">&quot;ember&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Model</span> <span class="nx">from</span> <span class="s1">&#39;ember-data/model&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">fullname</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">computed</span><span class="p">(</span><span class="s1">&#39;firstname&#39;</span><span class="p">,</span> <span class="s1">&#39;lastname&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;firstName&#39;</span><span class="p">)}</span> <span class="nx">$</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;lastName&#39;</span><span class="p">)}</span><span class="err">`</span><span class="p">;</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>But if you don&#8217;t really like it, you may define <strong>explicit getter</strong>:</p>




<figure class='code'><figcaption><span>app/models/user.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s2">&quot;ember&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Model</span> <span class="nx">from</span> <span class="s1">&#39;ember-data/model&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">fullname</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">computed</span><span class="p">(</span><span class="s1">&#39;firstname&#39;</span><span class="p">,</span> <span class="s1">&#39;lastname&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">get</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;firstName&#39;</span><span class="p">)}</span> <span class="nx">$</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;lastName&#39;</span><span class="p">)}</span><span class="err">`</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>And the last option, my preferred one: unleashing the power of <a href="https://karolgalanciak.com/blog/2015/12/02/ember-and-es7-decorators/" target="_blank">ES7 decorators</a> and using <a href="https://github.com/rwjblue/ember-computed-decorators" target="_blank">ember-computed-decorators</a> addon. That way we could define <code>fullName</code> computed property in the following way:</p>




<figure class='code'><figcaption><span>app/models/user.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s2">&quot;ember&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Model</span> <span class="nx">from</span> <span class="s1">&#39;ember-data/model&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">computed</span> <span class="nx">from</span> <span class="s1">&#39;ember-computed-decorators&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="err">@</span><span class="nx">computed</span><span class="p">(</span><span class="s1">&#39;firstName&#39;</span><span class="p">,</span> <span class="s1">&#39;lastName&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fullname</span><span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">firstName</span><span class="p">}</span> <span class="nx">$</span><span class="p">{</span><span class="nx">lastName</span><span class="p">}</span><span class="err">`</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>which looks just beautiful ;).</p>




<h2>Wrapping Up</h2>




<p>Even though <strong>arrow function expressions</strong> are very convenient to use, they can&#8217;t be used interchangeably with <strong>function expressions</strong>. Sometimes you may not want <code>this</code> inside a function to preserve outer context, which is exactly the case with <strong>Ember computed properties</strong>.</p>

]]></content>
  </entry>
  
</feed>
